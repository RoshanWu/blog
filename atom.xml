<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[肉山·察]]></title>
  <link href="http://roshanca.com/atom.xml" rel="self"/>
  <link href="http://roshanca.com/"/>
  <updated>2015-03-30T15:19:54+00:00</updated>
  <id>http://roshanca.com/</id>
  <author>
    <name><![CDATA[Roshan Wu]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[React Native：使用 JavaScript 构建应用]]></title>
    <link href="http://roshanca.com/2015/build-app-with-react-native"/>
    <updated>2015-03-29T00:00:00+00:00</updated>
    <id>http://roshanca.com/2015/build-app-with-react-native</id>
    <content type="html"><![CDATA[<p>原文：<a href="//www.raywenderlich.com/99473/introducing-react-native-building-apps-javascript">Introducing React Native: Building Apps with JavaScript</a></p>

<p>== 申明：转载请注明出处，尊重一下作者与译者的劳动:] ==</p>

<p>几个月前 Facebook 才刚向世人展露 <a href="//facebook.github.io/react-native/">React Native</a>：一个用 JavaScript 来构建原生 iOS 应用的框架，现在它的 Beta <a href="https://github.com/facebook/react-native">版官方源码</a>就已被放上了 github。</p>

<p>人们用 JavaScript 和 HTML5 写 iOS 应用，再用 <a href="//phonegap.com/">PhoneGap</a> 进行封装，这样的工作模式有一阵子了，React Native 到底有何不同呢？</p>

<p>React Native 完全不是一码事，人们对其带来的两点倍感兴奋：</p>

<ul>
<li><p>在 React Native 中，虽然你的应用逻辑是用 JavaScript 所写，然而应用的 UI 可完全是原生的；因此你可以完全摈弃 HTML5 UI 所带来的效率低下。</p></li>
<li><p>React 采用了一种非常大胆新颖的实现方式来构建用户界面。简单来说，应用的 UI 被简单地当做了一个当前的应用状态的功能函数来进行传递。</p></li>
</ul>

<p>关键的一点是 React Native 致力于为移动应用开发带来基于 <a href="//facebook.github.io/react/">React</a> 编程模式的巨大威力。它的目标并不是成为一个 &ldquo;write-once run-anywhere&rdquo; 的跨平台工具，它的目标是 &ldquo;learn-once write-anywhere&quot;。这是个很重要的差别。这篇教程只针对 iOS，但是一旦你学习到了它的概念创建 Android 应用对你来说应该也不是什么难事。</p>

<p>若你曾经写过 Objective-C 或 Swift，你可能对这项 JavaScript 来替代它们工作的技术不会感到特别兴奋。不过，作为一名 Swift 开发者，上述的第二点应该会激起你的兴趣。</p>

<p>通过 Swift，毫无疑问你已学到了更多函数式的编码算法和那些鼓励你转变或不变的技术。但是，在你构建 UI 的方式上，它与用 Objective-C 开发时并没多大不同：它仍是基于 UIKit 的实现。</p>

<p>通过虚拟 DOM 和反射机制等概念，React 将函数式编程直接带入 UI 层。</p>

<p>本篇教程以构建一个用于搜索英国城市房产登记项目的应用来向大家展示其工作原理。</p>

<p><img src="//cdn5.raywenderlich.com/wp-content/uploads/2015/03/PropertyFinder.png" alt=""></p>

<p>如果你之前从未写过任何 JavaScript，别怕；此教程会为你讲解每一步的代码原理。React 用 CSS 属性定义样式，一般来说它是足够易读易懂的，但如果需要的话，你可以参考优秀的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">Mozilla 开发网络参考</a>。</p>

<p>想要了解更多？继续阅读吧。</p>

<h2 id="准备工作">准备工作</h2>

<p>React Native 框架已经在 Github 上建立了<a href="https://github.com/facebook/react-native">仓库</a>，你可以通过 git 来克隆到本地，也可以选择下载 zip。一旦将它下载到了本地，在你开始写代码前，还有几件事要办。</p>

<p>React Native 用到了 <a href="https://nodejs.org/">Node.js</a>，一个 JavaScript 的运行环境，用来构建你的 JavaScript 代码。如果你还未安装它，那是时候装一个了。</p>

<p>第一步，<a href="//brew.sh/">安装 Homebrew</a>，按照 Homebrew 网站上的指示做，然后安装 Node.js，你可以通过终端窗口输入：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install node
</code></pre></div>
<p>接下来，用 <code>homebrew</code> 安装 <a href="https://facebook.github.io/watchman/">watchman</a>，一个来自 Facebook 的文件 watcher 工具：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install watchman
</code></pre></div>
<p>这是 React Native 用来观察代码变化并相应地作出重新构建用的，这好比每次你保存文件后 Xcode 就为你做了一次 build。</p>

<p>React Native 代码在运行之前先要解决它的依赖问题。打开终端窗口定位至 React Native 目录下，并执行：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm install
</code></pre></div>
<p>这是在用 Node 的包管理器在获取依赖。这与 CocoaPods 和 Carthage 的功能类似。一旦命令运行成功，你会发现一个叫 <code>node_modules</code> 的文件夹被创建，大量的外部依赖文件就在其中。</p>

<p>最后一步是启动开发服务。只需在刚才的终端窗口中继续输入：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm start
</code></pre></div>
<p>一旦执行，你会看到以下信息：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm start

&gt; react-native@0.1.0 start /Users/colineberhardt/Projects/react-native
&gt; ./packager/packager.sh


 ===============================================================
 |  Running packager on port 8081.       
 |  Keep this packager running while developing on any JS         
 |  projects. Feel free to close this tab and run your own      
 |  packager instance if you prefer.                              
 |                                                              
 |     https://github.com/facebook/react-native                 
 |                                                              
 ===============================================================


React packager ready.
</code></pre></div>
<p>这就对了，我们有了一个好的开头！将运行着脚本的终端窗口暂时搁置一边，我们继续教程。</p>

<p>此时此刻，我建议你先跑一跑官方的例子，看看环境配置是否都正常运转。用 Xcode 打开 <code>react-native/Examples/Movies</code> 目录下的项目文件，编译运行，检查 <code>Movies</code> 应用有没有出现问题。</p>

<h2 id="你好-react-native">你好 React Native</h2>

<p>在开始编写这款房产搜索应用之前，你将先创建一个极其简单的 Hello World 应用。在此过程中你将接触许多的组件和概念。</p>

<p>下载并解压缩这篇教程的<a href="//cdn5.raywenderlich.com/wp-content/uploads/2015/03/PropertyFinderStarter.zip">起步项目</a>，将其移至 <code>react-native/Examples</code> 目录下。一旦解压完毕，用 Xcode 打开 <code>PropertyFinder</code> 项目文件。先不着急编译运行，你得先写一些 JavaScript。</p>

<p>用你的编辑器打开 <code>PropertyFinderApp.js</code> 在文件的开头加入以下这句：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</code></pre></div>
<p>用以启动严格模式，它将带来更加严格的错误处理，提醒禁止使用一些不太理想的 JavaScript 语言特性。简而言之，它有助于我们写出更好的 JavaScript 代码。</p>

<p>接下来，加入以下这行：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</code></pre></div>
<p>这将加载 <code>react-native</code> 模块并将其赋值给变量 <code>React</code>。React Native 采用与 Node.js 相同的模块加载技术，利用 <code>require</code> 方法导入。大致类似 Swift 中关联和导入库。</p>

<p>在 <code>require</code> 语句下方，加入以下：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="nx">text</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span>
    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span><span class="p">,</span>
    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
    <span class="nx">margin</span><span class="o">:</span> <span class="mi">80</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>这句为 &quot;Hello World&rdquo; 文本单独定义了一个样式。如果你之前做过 web 开发，那你大概都认得这些属性名称。React Native 用<a href="//www.w3schools.com/css/">层叠样式表（CSS）</a>来定义应用 UI。</p>

<p>回到应用本身！在同一文件中，在刚才的样式申明语句下加入以下代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">PropertyFinderApp</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">React</span><span class="p">.</span><span class="nx">Text</span><span class="p">,</span> <span class="p">{</span><span class="nx">style</span><span class="o">:</span> <span class="nx">styles</span><span class="p">.</span><span class="nx">text</span><span class="p">},</span> <span class="s2">&quot;Hello World!&quot;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>是的，这是一个 JavaScript 类！</p>

<p>类概念在 ECMAScript 6 (ES6) 中才被引入。尽管 JavaScript 在不断地进化，web 开发者们仍然被老旧的浏览器的兼容性所限制。React Native 运行在 JavaScriptCore 中，因此，你可以运用现代语言的高级功能，而不必担心老旧浏览器不支持的问题。</p>

<p><code>PropertyFinderApp</code> 扩展自 <code>React.Component</code>, React 最基础的 UI 组件。组件包含了不可变的属性，和可变的状态变量，并且曝露了一个用来渲染组件的方法。目前应用足以简单，只需一个渲染方法。</p>

<p>React Native 组件不属于 UIKit 类，但它们是有一些异曲同工。框架会将 React 组件树转化为所需的原生 UI。</p>

<p>最后，在文件底部加入：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">React</span><span class="p">.</span><span class="nx">AppRegistry</span><span class="p">.</span><span class="nx">registerComponent</span><span class="p">(</span><span class="s1">&#39;PropertyFinderApp&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">PropertyFinderApp</span> <span class="p">});</span>
</code></pre></div>
<p><code>AppRegistry</code> 定义了一个指向应用的入口并且提供了根组件。</p>

<p>保存 <code>PropertyFinderApp.js</code> 的改动，并回到 Xcode。确保 <code>PropertyFinder</code> 配置中指定过了具体的 iPhone 模拟器后，就可以开始编译运行了。没过几秒你就可以看见你的 “Hello World” 应用：</p>

<p><img src="//cdn2.raywenderlich.com/wp-content/uploads/2015/03/react-helloworld.png" alt=""></p>

<p>那个跑在模拟器中的 JavaScript 应用，被渲染成了原生 UI，根本看不见浏览器的存在！</p>

<p>还是信不过我？:] 你可以自己验证：在 Xcode 中，选择菜单 <code>Debug\View Debugging\Capture View Hierarchy</code> 看一看原生视图的层级结构。你在任何地方都找不到 <code>UIWebView</code> 的实例。</p>

<p><img src="//cdn4.raywenderlich.com/wp-content/uploads/2015/03/ViewDebugging.png" alt=""></p>

<p>是不是对其背后的运作原理感到好奇？在 Xcode 中打开 <code>AppDelegate.m</code> 并定位到 <code>application:didFinishLaunchingWithOptions:</code> 这句，这个方法构建了一个 <code>RCTRootView</code>，它加载了 JavaScript 应用并渲染了其对应的 view。</p>

<p>当应用开始运行时，<code>RCTRootView</code> 从以下 URL 来加载应用：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">http://localhost:8081/Examples/PropertyFinder/PropertyFinderApp.includeRequire.runModule.bundle
</code></pre></div>
<p>回想起在教程开始时当你在终端窗口中执行 <code>npm start</code> 了吧，它其实是开启了一个容器和服务用以处理以上请求。</p>

<p>在 Safari 中打开这个 URL，你可以看到应用的 JavaScript 代码。你应该能找到你的 “Hello World” 应用代码，被包围在 React Native 框架代码之中。</p>

<p>当你的应用运行时，这段代码会被框架的核心加载与执行。在你的应用中，会加载 <code>PropertyFinderApp</code> 组件，然后构建原生 UIKit 视图。你会在接下来的教程中学到更多相关的内容。</p>

<h2 id="hello-world-jsx">Hello World JSX</h2>

<p>你的应用目前采用 <code>React.createElement</code> 来构建简单 UI，通过它 React 转变为相应的原生应用。你的 JavaScript 代码在当前格式下的可读性，不一会儿就会被更为复杂的多层嵌套的 UI 所迅速打破。</p>

<p>确保应用还在运行中，回到编辑器重新编辑 <code>PropertyFinderApp.js</code>。修改你的组件渲染方法中的 <code>return</code> 语句：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">return</span> <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span> <span class="p">(</span><span class="nx">Again</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/React.Text&gt;;</span>
</code></pre></div>
<p>这是 <a href="//facebook.github.io/react/docs/jsx-in-depth.html">JSX</a>，或是 JavaScript 语法扩展，它采用类 HTML 语法来混入你的 JavaScript 代码中。如果你是一名 web 开发者，你会对此感到非常熟悉。我们将在接下来的通篇文章中都使用 JSX 语法。</p>

<p>保存 <code>PropertyFinderApp.js</code> 并回到模拟器中，按下 <code>Cmd+R</code> 你会发现你的应用刷新了界面将信息更新为了“Hello World (Again)”。</p>

<p>重新运行 React Native 应用方便至极，就像刷新浏览器一般简单！:]</p>

<p>从此只需关注 JavaScript 文件，一直保持着程序运行，在对 <code>PropertyFinderApp.js</code> 修改保存后，简单的刷新调试。</p>

<p>Okay，“Hello World” 玩够了，接下来尝试写个真正的应用吧！</p>

<h2 id="添加导航">添加导航</h2>

<p>房产查找应用采用的是那一套基于标准导航栈的行为体验，提供自 UIKit 的导航控制器。是时候添加这项行为了。</p>

<p>在 <code>PropertyFinderApp.js</code> 中，重新命名 <code>PropertyFinderApp</code> 为 <code>HelloWorld</code>：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">HelloWorld</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</code></pre></div>
<p>保持 “Hello World” 文本再显示一会儿，但它将不再是你的应用的根组件了。</p>

<p>接下来在 <code>HelloWorld</code> 组件下方增加以下类：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">PropertyFinderApp</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">NavigatorIOS</span>
        <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span>
        <span class="nx">initialRoute</span><span class="o">=</span><span class="p">{{</span>
          <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Property Finder&#39;</span><span class="p">,</span>
          <span class="nx">component</span><span class="o">:</span> <span class="nx">HelloWorld</span><span class="p">,</span>
        <span class="p">}}</span><span class="o">/&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>这构建了一个导航控制器，应用了样式，设定了初始路由指向 <code>HelloWorld</code> 组件。在 web 开发中，<code>路由</code> 是一项用来定义应用导航组织结构的技术：在此应用中，哪些页面，或路由被映射至 URLs。</p>

<p>在同一文件中，更新样式申明以包含 container 样式：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="nx">text</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span>
    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span><span class="p">,</span>
    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
    <span class="nx">margin</span><span class="o">:</span> <span class="mi">80</span>
  <span class="p">},</span>
  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>稍后你会看到关于 <code>flex: 1</code> 的介绍。</p>

<p>让我们回到模拟器并且按下 <code>Cmd+R</code> 发现 UI 变成了这样：</p>

<p><img src="//cdn4.raywenderlich.com/wp-content/uploads/2015/03/react-helloworldagain.png" alt=""></p>

<p>这是导航控制器与其根视图，它目前为 “Hello World” 文本。棒极了 —— 你现在为你的应用添加了适宜的基础导航结构，该到时候添加“真正”的 UI 了！</p>

<h2 id="创建搜索页">创建搜索页</h2>

<p>为工程新增名为 <code>SearchPage.js</code> 的文件，放置在与 <code>PropertyFinderApp.js</code> 同一目录中。为此文件添加以下代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="p">{</span>
  <span class="nx">StyleSheet</span><span class="p">,</span>
  <span class="nx">Text</span><span class="p">,</span>
  <span class="nx">TextInput</span><span class="p">,</span>
  <span class="nx">View</span><span class="p">,</span>
  <span class="nx">TouchableHighlight</span><span class="p">,</span>
  <span class="nx">ActivityIndicatorIOS</span><span class="p">,</span>
  <span class="nx">Image</span><span class="p">,</span>
  <span class="nx">Component</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</code></pre></div>
<p>你已经在之前见过了严格模式的定义与 react-native 的导入，但接下来的赋值语句可是全新的。</p>

<p>这是<strong>解构赋值语句</strong>，它让你抽取出多个对象属性并用单条语句将其赋值给变量。所以，接下来你的代码中，可置 <code>React</code> 前缀。打个比方，你可以通过 <code>React.StyleSheet</code> 直接引用到 <code>StyleSheet</code>。解构赋值对于操作数组也是颇有用处，它也是<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">非常值得学习的</a>。</p>

<p>回到 <code>SearchPage.js</code> 文件，添加以下代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="nx">description</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">marginBottom</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nx">textAlign</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#656565&#39;</span>
  <span class="p">},</span>
  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">padding</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
    <span class="nx">marginTop</span><span class="o">:</span> <span class="mi">65</span><span class="p">,</span>
    <span class="nx">alignItems</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>同样的，这些是标准的 CSS 属性。像这样设置样式不如用界面构建工具来的直观，但它好过在你的 <code>viewDidLoad()</code> 方法中一个接着一个来设置视图属性！:]</p>

<p>在样式下方添加组件自身代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">SearchPage</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">description</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="nx">Search</span> <span class="k">for</span> <span class="nx">houses</span> <span class="nx">to</span> <span class="nx">buy</span><span class="o">!</span>
        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">description</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="nx">Search</span> <span class="nx">by</span> <span class="nx">place</span><span class="o">-</span><span class="nx">name</span><span class="p">,</span> <span class="nx">postcode</span> <span class="nx">or</span> <span class="nx">search</span> <span class="nx">near</span> <span class="nx">your</span> <span class="nx">location</span><span class="p">.</span>
        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
      <span class="o">&lt;</span><span class="err">/View&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><code>render</code> 是 JSX 和与之提供的结构的重大示例。透过这样的方式，你可以对这些组件构建成的 UI 一目了然：一个容器两个文本标签。</p>

<p>最后，我们在文件的结尾处添加：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">SearchPage</span><span class="p">;</span>
</code></pre></div>
<p>用以输出 <code>SearchPage</code> 类，它规定了其它文件允许引用的部分。</p>

<p>接着的步骤是要更新应用的路由以便初始化路由。</p>

<p>打开 <code>PropertyFinderApp.js</code>，在文件顶部 <code>require</code> 方法后加入：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">SearchPage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./SearchPage&#39;</span><span class="p">);</span>
</code></pre></div>
<p><code>PropertyFinderApp</code> 类中的 <code>render</code> 方法内，更新 <code>initialRoute</code> 以引用新增页面，如下所示：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">component</span><span class="o">:</span> <span class="nx">SearchPage</span>
</code></pre></div>
<p>此刻你可以移除 <code>HelloWorld</code> 类和与之相关的样式了。如过你愿意，你将再也不需要那段代码了。</p>

<p>回到模拟器，敲打 <code>Cmd+R</code> 查看新 UI：</p>

<p><img src="//cdn1.raywenderlich.com/wp-content/uploads/2015/03/react-searchstarter.png" alt=""></p>

<p>这就是运用了的新组件：<code>SearchPage</code>，你刚刚添加的。</p>

<h2 id="用-flexbox-定义样式">用 Flexbox 定义样式</h2>

<p>到目前为止，你已经见过了基础的 CSS 属性诸如 margins，paddings 和 color，但你可能不太熟悉 <code>flexbox</code>， 这是不久前才被加入 CSS 规范的属性，它对于应用 UI 排版布局那是相当的有用处。</p>

<p>React Native 采用了 <a href="https://github.com/facebook/css-layout">css-layout</a> 库，一个 JavaScript 对于 flexbox 标准的实现，它将布局转化成 C (for iOS) 和 Java (for Android)。</p>

<p>它很了不起，因为 Facebook 已将其作为一个独立的项目来进行开发维护，旨在多种语言。自此诞生了不少新奇的应用，比如<a href="//blog.scottlogic.com/2015/02/02/svg-layout-flexbox.html">在 SVG 上应用 flexbox 布局</a>（是的，那是我的作品&hellip;但噢不，我难尝饱眠已久）。</p>

<p>在你的应用中，容器拥有默认的列布局，这意味着它的子元素是按垂直堆叠排列的，像这样：</p>

<p><img src="//cdn3.raywenderlich.com/wp-content/uploads/2015/03/FlexStack.png" alt=""></p>

<p>这被称为<strong>主轴</strong>，它的排列可垂直可水平。</p>

<p>每个子元素的垂直位置，由其 margin，height 和 padding 来共同决定。容器也设置了 <code>alignItems</code> 属性为 <code>center</code>，这将影响其水平轴交叉轴上的排列，导致文本居中。</p>

<p>该为其加上输入框和按钮了。打开 <code>SearchPage.js</code>，在第二个 <code>Text</code> 元素的闭合标签后加入以下代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">flowRight</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">TextInput</span>
    <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">}</span>
    <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Search via name or postcode&#39;</span><span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nx">TouchableHighlight</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">button</span><span class="p">}</span>
      <span class="nx">underlayColor</span><span class="o">=</span><span class="s1">&#39;#99d9f4&#39;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">buttonText</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Go</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
  <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
<span class="o">&lt;</span><span class="err">/View&gt;</span>
<span class="o">&lt;</span><span class="nx">TouchableHighlight</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">button</span><span class="p">}</span>
    <span class="nx">underlayColor</span><span class="o">=</span><span class="s1">&#39;#99d9f4&#39;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">buttonText</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Location</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
<span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</code></pre></div>
<p>目前你已增加了两个顶级视图：一个拥有着一文本输入框和一按钮，另一个只包含了一按钮。一会儿再跟你解释如何定义这些元素样式的。</p>

<p>接下来，添加相应的样式到你的 <code>styles</code> 定义中：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">flowRight</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">flexDirection</span><span class="o">:</span> <span class="s1">&#39;row&#39;</span><span class="p">,</span>
  <span class="nx">alignItems</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
  <span class="nx">alignSelf</span><span class="o">:</span> <span class="s1">&#39;stretch&#39;</span>
<span class="p">},</span>
<span class="nx">buttonText</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
  <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span><span class="p">,</span>
  <span class="nx">alignSelf</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span>
<span class="p">},</span>
<span class="nx">button</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">height</span><span class="o">:</span> <span class="mi">36</span><span class="p">,</span>
  <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">flexDirection</span><span class="o">:</span> <span class="s1">&#39;row&#39;</span><span class="p">,</span>
  <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#48BBEC&#39;</span><span class="p">,</span>
  <span class="nx">borderColor</span><span class="o">:</span> <span class="s1">&#39;#48BBEC&#39;</span><span class="p">,</span>
  <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">borderRadius</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span>
  <span class="nx">marginBottom</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="nx">alignSelf</span><span class="o">:</span> <span class="s1">&#39;stretch&#39;</span><span class="p">,</span>
  <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span>
<span class="p">},</span>
<span class="nx">searchInput</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">height</span><span class="o">:</span> <span class="mi">36</span><span class="p">,</span>
  <span class="nx">padding</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
  <span class="nx">marginRight</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="nx">flex</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
  <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
  <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">borderColor</span><span class="o">:</span> <span class="s1">&#39;#48BBEC&#39;</span><span class="p">,</span>
  <span class="nx">borderRadius</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span>
  <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#48BBEC&#39;</span>
<span class="p">}</span>
</code></pre></div>
<p>格外小心它的格式，每一个样式属性定义块后必须用逗号来隔开。这意味着在 <code>container</code> 的样式定义结尾处也要有逗号。</p>

<p>这些样式将应用在你刚添加的输入框和按钮上。</p>

<p>回到模拟器按下 <code>Cmd+R</code> 以刷新 UI：</p>

<p><img src="//cdn3.raywenderlich.com/wp-content/uploads/2015/03/react-searchpageinput.png" alt=""></p>

<p>文本域和 &ldquo;Go&rdquo; 按钮要并列一排，所以你要将其都包裹在同一容器中，并给容器增加 <code>flexDirection: &#39;row&#39;</code> 的样式。不要为输入框和按钮设置具体的宽度，取而代之的是给它们一个 <code>flex</code> 值。文本域设置为 <code>flex: 4</code>，与此同时将按钮设置为 <code>flex: 1;</code>，所以它们的宽度是 4:1 比例。</p>

<p>你也许注意到了这些按钮，并不是真正的按钮！:] 在 UIKit 中，原生按钮比标签更不易点击，因此 React Native 团队决定直接在 JavaScript 中构建按钮来的更容易一些。在你的应用中，按钮使用 <code>TouchableHighlight</code> 来构建，这是一个 React Native 组件，当它被点击时它会变得透明从而使得其底层的颜色显露出来。</p>

<p>最后，完善应用搜索页面还差一张房子的图片。在 <code>location</code> 按钮的 <code>TouchableHighlight</code> 组件后加入：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">source</span><span class="o">=</span><span class="p">{</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;image!house&#39;</span><span class="p">)}</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">image</span><span class="p">}</span><span class="o">/&gt;</span>
</code></pre></div>
<p>现在，在样式列表中增加图片相应的样式，别忘了它与它之前的样式定义之间要加入逗号。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">image</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">width</span><span class="o">:</span> <span class="mi">217</span><span class="p">,</span>
  <span class="nx">height</span><span class="o">:</span> <span class="mi">138</span>
<span class="p">}</span>
</code></pre></div>
<p>语句 <code>require(&#39;image!house&#39;)</code> 用以引用定位在应用静态资源目录下的图片资源的。在 Xcode 中，打开 <code>Images.xcassets</code> 你会发现以上代码引用的 &ldquo;house&rdquo; 图标。</p>

<p>回到模拟器按下 <code>Cmd+R</code> 欣赏你的新 UI 吧：</p>

<p><img src="//cdn2.raywenderlich.com/wp-content/uploads/2015/03/react-searchpagehouse.png" alt=""></p>

<p>现在你的应用看上去不错，但缺少相应的功能。所以当务之急是增加应用的状态和表现行为。</p>

<h2 id="增加组件状态">增加组件状态</h2>

<p>每一个 React 组件都有自己的状态对象，它以键值的形式作为存储。在一个组件被渲染之前，我们必须先设置它的初始状态。</p>

<p>在 <code>SearchPage.js</code> 中，为 <code>SearchPage</code> 类加入以下代码，加在 <code>render()</code> 之前：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">searchString</span><span class="o">:</span> <span class="s1">&#39;london&#39;</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div>
<p>组件当前拥有了 <code>state</code> 变量，其中的 <code>searchString</code> 被设置成了一个初始值：<code>london</code>。</p>

<p>看看怎么使用这个组件状态的。在 <code>render</code> 中，用以下代码替换 <code>TextInput</code> 元素：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">TextInput</span>
  <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">}</span>
  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">searchString</span><span class="p">}</span>
  <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Search via name or postcode&#39;</span><span class="o">/&gt;</span>
</code></pre></div>
<p>此处将 <code>TextInput</code> 的 value 属性 —— 那是向用户展示文本用的 —— 设置为了当下 <code>searchString</code> 状态变量的值。这只是用以处理初始状态的设置，那接下来当用户编辑本文又会发生什么呢？</p>

<p>第一步是为此动作创建一个事件方法。在 <code>SearchPage</code> 类定义中增加如下方法：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">onSearchTextChanged</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;onSearchTextChanged&#39;</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">searchString</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">nativeEvent</span><span class="p">.</span><span class="nx">text</span> <span class="p">});</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">searchString</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>这可从事件的 <code>text</code> 属性获取值并且用它来更新组件状态，同时也增加了一些打印信息的代码用以测试。</p>

<p>为使文本变化时方法被调用，回到在 <code>render</code> 方法中的 <code>TextInput</code> 元素上，我们为其增添 <code>onChange</code> 属性，它看起来成了这样：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">TextInput</span>
  <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">}</span>
  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">searchString</span><span class="p">}</span>
  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSearchTextChanged</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
  <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Search via name or postcode&#39;</span><span class="o">/&gt;</span>
</code></pre></div>
<p>只要用户一改变输入文本，<code>onChange</code> 即刻被触发，<code>onSearchTextChanged</code> 方法被执行。</p>

<p>在你刷新应用前我们再做一步操作：将下列打印语句加入到 <code>render()</code> 顶部，<code>return</code> 之前：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;SearchPage.render&#39;</span><span class="p">);</span>
</code></pre></div>
<p>你稍后会对这些打印语句有所了解的！:]</p>

<p>回到模拟器，按下 <code>Cmd+R</code>，你应该看到输入框内的初始文本显示为 &ldquo;london&rdquo; 并且一旦对其进行编辑一些调试语句就被打印在了 Xcode 的控制台里。</p>

<p><img src="//cdn3.raywenderlich.com/wp-content/uploads/2015/03/react-renderconsole.png" alt=""></p>

<p>查看以上截图，打印语句的顺序有些奇怪：</p>

<ol>
<li>初始调用 <code>render()</code> 以创建视图。</li>
<li>当文本改变时执行 <code>onSearchTextChanged()</code>。</li>
<li>接着更新组件状态反应在新的输入框文本上，后者又触发了另一轮 render。</li>
<li><code>onSearchTextChanged()</code> 在日志中输出新的搜索字符串。</li>
</ol>

<p>无论何时，只要是应用一更新任意组件的状态，它都将会触发整个 UI 进行重新渲染，在此期间，所有组件的 <code>render</code> 方法都会调用执行。这是一个很赞的思路，因为它完全地对渲染逻辑进行了解耦，这些逻辑由影响 UI 的状态变化所产生。</p>

<p>在其它众多的 UI 框架中，要么是由你负责手动地更新基于 UI 的状态变化，要么是利用某种绑定框架来创建一个的应用状态和它的 UI 呈现之间内在关联。</p>

<p>看，举个例子，我的文章：实现<a href="//www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1">在 ReactiveCocoa 中的 MVVM 模式</a>。</p>

<p>用 React，你不必再为究竟是哪一部分的 UI 也许受到了状态变化的影响而感到担心，整个 UI 都像是作为一个你的应用状态的方法函数来进行简单传递。</p>

<p>这一刻你可能会指出这套概念当中的一个缺点。没错，就是 —— 性能。</p>

<p>当然了你不可能删除整个 UI 再重新生成，每次一有状态改变就这么做？这可是 React 聪明之处。每一次 UI 渲染，它都会将渲染方法返回的视图树与当前的 UIKit 视图进行比对。比对的结果中相差异的部分才是 React 需要对当前视图做出更新的部分，也就是说，只有改动的一小部分才会被真正的重新渲染生成。</p>

<p>令人刮目相看的是这新奇的理念使得 ReactJS 如此独特 —— 虚拟 DOM (文档对象模型, web 文档的可视树)和反射机制 —— 运用在 iOS 应用之中。</p>

<p>你可以到时候再回头看这些东西，我们仍要继续完善当前的 app。删除打印信息语句，你不再需要它们来扰乱你的代码了。</p>

<h2 id="开始搜索">开始搜索</h2>

<p>为了实现搜索功能你需要在 “Go” 按钮的点击事件上做些文章。创建一个合适的 API 请求，并且为用户在此数据查询的等待过程中提供一个可视化的指示界面。</p>

<p>在 <code>SearchPage.js</code> 中，更新初始状态：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">searchString</span><span class="o">:</span> <span class="s1">&#39;london&#39;</span><span class="p">,</span>
  <span class="nx">isLoading</span><span class="o">:</span> <span class="kc">false</span>
<span class="p">};</span>
</code></pre></div>
<p>新增的 <code>isLoading</code> 属性用来跟踪数据查询是否完成。</p>

<p>将以下逻辑加入到 <code>render</code> 的开头：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">spinner</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">isLoading</span> <span class="o">?</span>
  <span class="p">(</span> <span class="o">&lt;</span><span class="nx">ActivityIndicatorIOS</span>
      <span class="nx">hidden</span><span class="o">=</span><span class="s1">&#39;true&#39;</span>
      <span class="nx">size</span><span class="o">=</span><span class="s1">&#39;large&#39;</span><span class="o">/&gt;</span> <span class="p">)</span> <span class="o">:</span>
  <span class="p">(</span> <span class="o">&lt;</span><span class="nx">View</span><span class="o">/&gt;</span><span class="p">);</span>
</code></pre></div>
<p>这是一个三元的 <code>if</code> 判断语句，它的执行结果不是增加一个动态指示器就是一个空视图，这取决于组件的 <code>isLoading</code> 状态。因为整个组件每次都会渲染，所以你可以对 JSX 和 JavaScript 逻辑代码随意混用。</p>

<p>JSX 在 <code>return</code> 中定义的搜索 UI 里，加入下列一行，位于 <code>Image</code> 下方：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span><span class="nx">spinner</span><span class="p">}</span>
</code></pre></div>
<p>现在，在 <code>TouchableHighlight</code> 包裹着的 &ldquo;Go&rdquo; 文本视图上增加以下属性：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSearchPressed</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
</code></pre></div>
<p>接着，在 <code>SearchPage</code> 类里添加以下方法：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">_executeQuery</span><span class="p">(</span><span class="nx">query</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">isLoading</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="p">}</span>

<span class="nx">onSearchPressed</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">urlForQueryAndPage</span><span class="p">(</span><span class="s1">&#39;place_name&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">searchString</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_executeQuery</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p><code>_executeQuery()</code> 会执行最终的查询，但现在我们先让它简单地输出一些信息在控制台里，并将 <code>isLoading</code> 设置设置为 <code>true</code> 以便 UI 更新。</p>

<p>当 &ldquo;Go&rdquo; 按钮被点击时，<code>onSearchPressed()</code> 将被执行以开展查询。</p>

<p>最后，在 <code>SearchPage</code> 类申明之前加入以下工具类方法：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">urlForQueryAndPage</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">pageNumber</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;uk&#39;</span><span class="p">,</span>
      <span class="nx">pretty</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
      <span class="nx">encoding</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
      <span class="nx">listing_type</span><span class="o">:</span> <span class="s1">&#39;buy&#39;</span><span class="p">,</span>
      <span class="nx">action</span><span class="o">:</span> <span class="s1">&#39;search_listings&#39;</span><span class="p">,</span>
      <span class="nx">page</span><span class="o">:</span> <span class="nx">pageNumber</span>
  <span class="p">};</span>
  <span class="nx">data</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">querystring</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39;=&#39;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">key</span><span class="p">]))</span>
    <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&amp;&#39;</span><span class="p">);</span>

  <span class="k">return</span> <span class="s1">&#39;//api.nestoria.co.uk/api?&#39;</span> <span class="o">+</span> <span class="nx">querystring</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>
<p>这个方法不依赖于 <code>SearchPage</code>，所以它以一个独立的函数而不是一个类方法的形式存在。它一开始创建了基于参数的查询字符串在 <code>data</code> 之中，接下来它将数据转换成要求的字符串格式，<code>name=value</code>结队成组并用 &amp; 字符连接着。这里的 <code>=&gt;</code> 语法是表示一个箭头函数，这是<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">新近加入的 JavaScript 语言</a>中用以创建匿名函数的简要语法。</p>

<p>回头看模拟器，按下 <code>Cmd+R</code> 重新载入应用并点击 &ldquo;Go&rdquo; 按钮，你将能看到旋转的动态指示器。查看 Xcode 控制台，你将看到如下：</p>

<p><img src="//cdn1.raywenderlich.com/wp-content/uploads/2015/03/SearchAcitivityIndicator.png" alt=""></p>

<p>菊花图展现在视图中数据请求 URL 显示在控制台日志里。复制粘贴这段 URL 到你的浏览器中看看结果如何。你将会看到大段的 JSON 对象，别担心 —— 你不必了解它！你将编写代码解析它。</p>

<p>下一步我们在应用中处理这项请求。</p>

<h2 id="处理-api-请求">处理 API 请求</h2>

<p>还是在 <code>SearchPage.js</code> 中，更新初始状态，在构造方法中加入 <code>message</code> 变量：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">searchString</span><span class="o">:</span> <span class="s1">&#39;london&#39;</span><span class="p">,</span>
  <span class="nx">isLoading</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
<span class="p">};</span>
</code></pre></div>
<p>在 <code>render</code> 中，在 UI 底部加入：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">description</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</code></pre></div>
<p>它为向用户显示了信息条数。</p>

<p>在 <code>SearchPage</code> 类中，加入以下代码到 <code>_executeQuery()</code> 结尾处：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">fetch</span><span class="p">(</span><span class="nx">query</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">json</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_handleResponse</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">response</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> 
     <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
      <span class="nx">isLoading</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Something bad happened &#39;</span> <span class="o">+</span> <span class="nx">error</span>
   <span class="p">}));</span>
</code></pre></div>
<p>这里采用了 <code>fetch</code> 函数，它是 <a href="https://fetch.spec.whatwg.org/">Web API 中的一部分</a>，提供了大量改进的针对 <code>XMLHttpRequest</code> 的 API。异步响应将以一个 <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">promise</a> 的形式返回，在成功回路中将解析的 JSON 提供给一个接下来要新增的方法。</p>

<p>最后一步是增加下列方法到 <code>SearchPage</code>：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">_handleResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">isLoading</span><span class="o">:</span> <span class="kc">false</span> <span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="p">});</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">application_response_code</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;1&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Properties found: &#39;</span> <span class="o">+</span> <span class="nx">response</span><span class="p">.</span><span class="nx">listings</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Location not recognized; please try again.&#39;</span><span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>这将清除 <code>isLoading</code> 状态和请求成功后显示在调试日志内的房产数量信息。</p>

<p>保存你的修改，然后回到模拟器刷新之，试着搜索关键字 &ldquo;london&quot;，你应该能在日志中看到 20 处房产已被找到的信息。接下来试着搜索一个不存在的地点，比如 &quot;narnia&quot;，迎接你的将是以下信息：</p>

<p><img src="//cdn5.raywenderlich.com/wp-content/uploads/2015/03/react-narnia.png" alt=""></p>

<p>到了展现这伦敦真实位置的 20 处房产的时刻了。</p>

<h2 id="展示结果">展示结果</h2>

<p>创建一个 <code>SearchResults.js</code> 文件，加入以下代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="p">{</span>
  <span class="nx">StyleSheet</span><span class="p">,</span>
  <span class="nx">Image</span><span class="p">,</span> 
  <span class="nx">View</span><span class="p">,</span>
  <span class="nx">TouchableHighlight</span><span class="p">,</span>
  <span class="nx">ListView</span><span class="p">,</span>
  <span class="nx">Text</span><span class="p">,</span>
  <span class="nx">Component</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</code></pre></div>
<p>对，没错，一个包含着 <code>react-native</code> 模块的 <code>require</code> 语句，还有一个解构赋值。这些都在之前提过了对吧？</p>

<p>接着添加组件自身：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">SearchResults</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>

  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ListView</span><span class="p">.</span><span class="nx">DataSource</span><span class="p">(</span>
      <span class="p">{</span><span class="nx">rowHasChanged</span><span class="o">:</span> <span class="p">(</span><span class="nx">r1</span><span class="p">,</span> <span class="nx">r2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">r1</span><span class="p">.</span><span class="nx">guid</span> <span class="o">!==</span> <span class="nx">r2</span><span class="p">.</span><span class="nx">guid</span><span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">dataSource</span><span class="o">:</span> <span class="nx">dataSource</span><span class="p">.</span><span class="nx">cloneWithRows</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">listings</span><span class="p">)</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="nx">renderRow</span><span class="p">(</span><span class="nx">rowData</span><span class="p">,</span> <span class="nx">sectionID</span><span class="p">,</span> <span class="nx">rowID</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">TouchableHighlight</span>
          <span class="nx">underlayColor</span><span class="o">=</span><span class="s1">&#39;#dddddd&#39;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">rowData</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
        <span class="o">&lt;</span><span class="err">/View&gt;</span>
      <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">ListView</span>
        <span class="nx">dataSource</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">}</span>
        <span class="nx">renderRow</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderRow</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="o">/&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div>
<p>以上代码使用到了更加特殊的组件 —— <code>ListView</code> —— 它在一个可滚动的容器中展现多排数据，类似 <code>UITableView</code>。你可以通过 <code>ListView.DataSource</code> 和一个方法来向 <code>ListView</code> 提供数据，这个方法每一行数据提供 UI 的实现。</p>

<p>构建数据源时，你应当提供一个能两两比较行 id 的方法。<code>ListView</code> 用此在核对进程中来明确列表数据的具体改动。在这种情况下，Nestoria 房产的 API 所返回的 <code>guid</code> 属性，正好符合这一目的。</p>

<p>现在增加模块输出定义在文件底部：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">SearchResults</span><span class="p">;</span>
</code></pre></div>
<p>增加以下代码至 <code>SearchPage.js</code> 文件顶部位置，插入在用以请求 React 的 <code>require</code> 之下：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">SearchResults</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./SearchResults&#39;</span><span class="p">);</span>
</code></pre></div>
<p>这样做使得我们在 <code>SearchPage</code> 中得以运用刚才添加的 <code>SearchResults</code> 类。</p>

<p>修改当前的 <code>_handleResponse</code> 方法，将 <code>console.log</code> 语句替换为下列代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
  <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Results&#39;</span><span class="p">,</span>
  <span class="nx">component</span><span class="o">:</span> <span class="nx">SearchResults</span><span class="p">,</span>
  <span class="nx">passProps</span><span class="o">:</span> <span class="p">{</span><span class="nx">listings</span><span class="o">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">listings</span><span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>以上代码将为你导航到新增的 <code>SearchResults</code> 组件并通过 API 请求来为列表传递数据。使用 <code>push</code> 方法可保证搜索结果页被推入之导航栈中，这意味着你可以通过返回按钮来回到根目录。</p>

<p>回到模拟器刷新并搜索，展现在你面前的是一份房产列表：</p>

<p><img src="//cdn4.raywenderlich.com/wp-content/uploads/2015/03/react-searchresults1.png" alt=""></p>

<p>很高兴得到了我们期望已久的房产列表，但这列表展示略挫，让我们来让它变的更好一些。</p>

<h2 id="接触样式">接触样式</h2>

<p>这些 React Native 代码自此应该一回生二回熟了，以此以下教程可以两步并作一步来快速讲解。</p>

<p>在 <code>SearchResults.js</code> 中的解构赋值语句后添加以下样式定义：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="nx">thumb</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">width</span><span class="o">:</span> <span class="mi">80</span><span class="p">,</span>
    <span class="nx">height</span><span class="o">:</span> <span class="mi">80</span><span class="p">,</span>
    <span class="nx">marginRight</span><span class="o">:</span> <span class="mi">10</span>
  <span class="p">},</span>
  <span class="nx">textContainer</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span>
  <span class="p">},</span>
  <span class="nx">separator</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">height</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#dddddd&#39;</span>
  <span class="p">},</span>
  <span class="nx">price</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
    <span class="nx">fontWeight</span><span class="o">:</span> <span class="s1">&#39;bold&#39;</span><span class="p">,</span>
    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#48BBEC&#39;</span>
  <span class="p">},</span>
  <span class="nx">title</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#656565&#39;</span>
  <span class="p">},</span>
  <span class="nx">rowContainer</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">flexDirection</span><span class="o">:</span> <span class="s1">&#39;row&#39;</span><span class="p">,</span>
    <span class="nx">padding</span><span class="o">:</span> <span class="mi">10</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>以上定义了每一行即将要被渲染的列表样式。</p>

<p>接着用以下代码替换 <code>renderRow()</code> 方法：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">renderRow</span><span class="p">(</span><span class="nx">rowData</span><span class="p">,</span> <span class="nx">sectionID</span><span class="p">,</span> <span class="nx">rowID</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">price</span> <span class="o">=</span> <span class="nx">rowData</span><span class="p">.</span><span class="nx">price_formatted</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">TouchableHighlight</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">rowPressed</span><span class="p">(</span><span class="nx">rowData</span><span class="p">.</span><span class="nx">guid</span><span class="p">)}</span>
        <span class="nx">underlayColor</span><span class="o">=</span><span class="s1">&#39;#dddddd&#39;</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">rowContainer</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">thumb</span><span class="p">}</span> <span class="nx">source</span><span class="o">=</span> <span class="err">/&gt;</span>
          <span class="o">&lt;</span><span class="nx">View</span>  <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">textContainer</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">price</span><span class="p">}</span><span class="o">&gt;</span><span class="err">£</span><span class="p">{</span><span class="nx">price</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
            <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span> 
                  <span class="nx">numberOfLines</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">rowData</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
          <span class="o">&lt;</span><span class="err">/View&gt;</span>
        <span class="o">&lt;</span><span class="err">/View&gt;</span>
        <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">separator</span><span class="p">}</span><span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="err">/View&gt;</span>
    <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>这对返回的价格数据做了一点操作，将其 &quot;300,000 GBP&rdquo; 固定格式中的 GBP 后缀给去掉。然后渲染每一行 UI 采用的是你已熟烂于心的技术了。这一次，略缩图的数据是以 URL 的方式提供的，React Native 不会在主线程对其进行解码。</p>

<p>注意 <code>TouchableHighlight</code> 组件的 <code>onPress</code> 属性，它利用了箭头函数来获取每一行的 <code>guid</code>。</p>

<p>最后我们增加 press 的处理方法：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">rowPressed</span><span class="p">(</span><span class="nx">propertyGuid</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">property</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">listings</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">prop</span> <span class="o">=&gt;</span> <span class="nx">prop</span><span class="p">.</span><span class="nx">guid</span> <span class="o">===</span> <span class="nx">propertyGuid</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>这个方法能定位哪一行房产正被用户点击中。目前它还起不了作用，一会我们再来修复它。但现在，我们来欣赏下你的作品吧。</p>

<p>回到模拟器刷新，来看看你的搜索结果页吧：</p>

<p><img src="//cdn4.raywenderlich.com/wp-content/uploads/2015/03/react-searchresults2.png" alt=""></p>

<p>看上去好很多了 —— 虽然这让人感到惊奇谁能住的起伦敦！</p>

<p>到了添加应用最后的视图的时候了。</p>

<h2 id="房产详细页视图">房产详细页视图</h2>

<p>增加新文件 <code>PropertyView.js</code> 到项目中，接着在文件中加入代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="p">{</span>
  <span class="nx">StyleSheet</span><span class="p">,</span>
  <span class="nx">Image</span><span class="p">,</span> 
  <span class="nx">View</span><span class="p">,</span>
  <span class="nx">Text</span><span class="p">,</span>
  <span class="nx">Component</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</code></pre></div>
<p>我敢确定这些都已无需再过多介绍，你在梦里都做到了！:]</p>

<p>接下来增添下列样式：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="nx">container</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">marginTop</span><span class="o">:</span> <span class="mi">65</span>
  <span class="p">},</span>
  <span class="nx">heading</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#F8F8F8&#39;</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nx">separator</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">height</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#DDDDDD&#39;</span>
  <span class="p">},</span>
  <span class="nx">image</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">width</span><span class="o">:</span> <span class="mi">400</span><span class="p">,</span>
    <span class="nx">height</span><span class="o">:</span> <span class="mi">300</span>
  <span class="p">},</span>
  <span class="nx">price</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
    <span class="nx">fontWeight</span><span class="o">:</span> <span class="s1">&#39;bold&#39;</span><span class="p">,</span>
    <span class="nx">margin</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#48BBEC&#39;</span>
  <span class="p">},</span>
  <span class="nx">title</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nx">margin</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#656565&#39;</span>
  <span class="p">},</span>
  <span class="nx">description</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="nx">margin</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#656565&#39;</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>再来增加组件：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">PropertyView</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">property</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">property</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">stats</span> <span class="o">=</span> <span class="nx">property</span><span class="p">.</span><span class="nx">bedroom_number</span> <span class="o">+</span> <span class="s1">&#39; bed &#39;</span> <span class="o">+</span> <span class="nx">property</span><span class="p">.</span><span class="nx">property_type</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">property</span><span class="p">.</span><span class="nx">bathroom_number</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">stats</span> <span class="o">+=</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="nx">property</span><span class="p">.</span><span class="nx">bathroom_number</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">property</span><span class="p">.</span><span class="nx">bathroom_number</span> <span class="o">&gt;</span> <span class="mi">1</span>
        <span class="o">?</span> <span class="s1">&#39;bathrooms&#39;</span> <span class="o">:</span> <span class="s1">&#39;bathroom&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">price</span> <span class="o">=</span> <span class="nx">property</span><span class="p">.</span><span class="nx">price_formatted</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>

    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">image</span><span class="p">}</span> 
            <span class="nx">source</span><span class="o">=</span> <span class="err">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">heading</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">price</span><span class="p">}</span><span class="o">&gt;</span><span class="err">£</span><span class="p">{</span><span class="nx">price</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
          <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">property</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
          <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">separator</span><span class="p">}</span><span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="err">/View&gt;</span>
        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">description</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">stats</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">description</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">property</span><span class="p">.</span><span class="nx">summary</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
      <span class="o">&lt;</span><span class="err">/View&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>第一部分的 <code>render()</code> 方法处理数据操作。通常来讲，由 API 返回来的数据往往不是很完美，所以我们要写一些简单的逻辑来处理得到我们想要的数据格式。</p>

<p>其余的 <code>render</code> 不用说也很简单，它是一个组件的不可变状态的方法。</p>

<p>最后我们在文件底部加上输出：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">PropertyView</span><span class="p">;</span>
</code></pre></div>
<p>回到 <code>SearchResults.js</code> 并增加 <code>require</code> 语句在文件头部，紧随 React <code>require</code> 这一行：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">PropertyView</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./PropertyView&#39;</span><span class="p">);</span>
</code></pre></div>
<p>接下来更新 <code>rowPressed()</code> 将导航转向你新增的 <code>PropertyView</code>：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">rowPressed</span><span class="p">(</span><span class="nx">propertyGuid</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">property</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">listings</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">prop</span> <span class="o">=&gt;</span> <span class="nx">prop</span><span class="p">.</span><span class="nx">guid</span> <span class="o">===</span> <span class="nx">propertyGuid</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Property&quot;</span><span class="p">,</span>
    <span class="nx">component</span><span class="o">:</span> <span class="nx">PropertyView</span><span class="p">,</span>
    <span class="nx">passProps</span><span class="o">:</span> <span class="p">{</span><span class="nx">property</span><span class="o">:</span> <span class="nx">property</span><span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>你懂的，回到模拟器按下 <code>Cmd+R</code>，一路搜索查看下来，你会看到：</p>

<p><img src="//cdn4.raywenderlich.com/wp-content/uploads/2015/03/react-property.png" alt=""></p>

<p>负担的起的生活才是最好滴 —— 那个软垫真好看！（译者注：作者你又调皮了）</p>

<p>至此你的应用已基本完成。还差一步就是允许用户搜索其周边房产。</p>

<h2 id="基于地理位置的搜索">基于地理位置的搜索</h2>

<p>在 Xcode 中，打开 <code>Info.plist</code> 新增一个键，通过点击右键选择 <code>Add Row</code> 来完成。键名为 <code>NSLocationWhenInUseUsageDescription</code>，并用取值为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">PropertyFinder would like to use your location to find nearby properties
</code></pre></div>
<p>这是你完成后 plist 文件的样子：</p>

<p><img src="//cdn5.raywenderlich.com/wp-content/uploads/2015/03/Screen-Shot-2015-03-20-at-21.49.06.png" alt=""></p>

<p>这副键值是用来提示用户确认是否要使用他们的地理位置的。</p>

<p>打开 <code>SearchPage.js</code>，定位到 &ldquo;Location&rdquo; 按钮的 <code>TouchableHighlight</code> 上，加入以下属性值：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onLocationPressed</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
</code></pre></div>
<p>当你点击这个按钮时，它将执行 <code>onLocationPressed</code> —— 接下来要添加的。</p>

<p>在 <code>SearchPage</code> 类中添加：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">onLocationPressed</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">getCurrentPosition</span><span class="p">(</span>
    <span class="nx">location</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">search</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">latitude</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">searchString</span><span class="o">:</span> <span class="nx">search</span> <span class="p">});</span>
      <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">urlForQueryAndPage</span><span class="p">(</span><span class="s1">&#39;centre_point&#39;</span><span class="p">,</span> <span class="nx">search</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_executeQuery</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
        <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;There was a problem with obtaining your location: &#39;</span> <span class="o">+</span> <span class="nx">error</span>
      <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>用户当前位置通过 <code>navigator.geolocation</code> 被取回，这是一个被 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation">Web API 定义</a>的接口，所以它对于曾在浏览器当中用过定位服务的人来说非常熟悉了。React Native 框架提供了自身对原生 iOS 定位服务的 API 实现。</p>

<p>如果当前位置被成功捕获，将执行第一个箭头函数，它向 Nestoria 发起了一个查询请求。如果出错，它将显示一个基本的报错信息。</p>

<p>一旦你更改了 plist 文件，就必须重启应用才能生效。<code>Cmd+R</code> 无效了这回 —— 抱歉。在 Xcode 停止运行应用，重新构建运行。</p>

<p>在使用基于定位服务的搜索时，你的具体位置必须是在 Nestoria 房产公司的数据库中。从模拟器的菜单选项中选择 <code>Debug\Location\Custom Location...</code> 并输入维度 <code>55.02</code> 和经度 <code>-1.42</code>，这坐标来自英格兰北部的一座海滨小镇，我称之为故乡！</p>

<p><img src="//cdn1.raywenderlich.com/wp-content/uploads/2015/03/WhitleyBaySearch-647x500.png" alt=""></p>

<p>虽然不如伦敦 —— 但起码住的起！:]</p>

<h2 id="接下来该做什么？">接下来该做什么？</h2>

<p>恭喜你完成了第一个 React Native 应用！你可以<a href="//cdn1.raywenderlich.com/wp-content/uploads/2015/03/PropertyFinder-Final1.zip">下载本教程的最终完成项目</a>跑起来试试。</p>

<p>如果你来自 Web 界，你会发现用 JavaScript 和 React定义界面和导航并从中获得完整的原生 UI 是多么地容易。但如果你是原生应用的开发者，我希望你能从 React Native 获得一点感官上的启发：快速应用迭代，现代的 JavaScript 语言和清晰的 CSS 样式。</p>

<p>也许你希望用这套框架来写你下一个应用？亦或，你仍坚持 Swift 或 Objective-C? 无论你选择哪条路，我都希望你能从这篇文章中受益，并且能为你今后的项目中带来一些想法。</p>

<p>如果对本篇教程有任何的意见或建议，请加入论坛来讨论。（译者注：抱歉，我没发现论坛链接，估计作者说的是文章下方的留言区啦）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年工作总结]]></title>
    <link href="http://roshanca.com/2014/2014-work-summary"/>
    <updated>2014-12-31T16:23:00+00:00</updated>
    <id>http://roshanca.com/2014/2014-work-summary</id>
    <content type="html"><![CDATA[<p>2014 马上就要画上句点，回首这一年，感慨良多。最大的感受是工作上的充实：今年公司自创业以来业务量最多的一年，真是锻炼人的一年呐。</p>

<h2 id="成长">成长</h2>

<p>自去年网上开户的项目开始没多久，自己便开始尝试编写自动化构建脚本，自动部署至公司服务器提供预览，自动上传提交，效率有了质的飞跃。今年在其他项目上，采用了更加流行的且学习成本更低的 <a href="http://gruntjs.com">grunt</a> 和 <a href="http://gulpjs.com">gulp</a> 来做 workflow，现已成为了我们团队的标配。</p>

<p>今年下半年开始，我逐渐将精力转向网上开户移动端的项目开发，开始尝试的两个版本都很不理想，在第三版启动时，我在大家的质疑声中力推市面上最新的 HTML5 移动框架 —— <a href="http://www.idangero.us/framework7/">Framework7</a>，当时不被看好。这套框架在当时不要说没中文资源，连英文文档也只有寥寥几句。而且由于其只针对 iOS 系统而在 Android 下坑不断，我花了不少的力气在兼容性上填坑。好在 F7 是开源的框架，遇到实在难以解决的困难我就上 <a href="https://github.com/nolimits4web/framework7/">github</a> 用英文给框架作者提 issues，甚至有时也推送自己的解决方案代码。在我的坚持下，随着项目进展也随着框架自身完善与文档逐渐丰富，其优势渐渐显露出来，我们也借此机会打败了我们的竞争对手重新赢得了客户信任。目前 F7 已成为了我们移动端前端开发的主力框架。</p>

<p>在这趟移动端开发之旅中，我也尝试了新的开发模式，按照 MVC 的思想将前后端的代码尽可能进行了分离，将后端业务操作的 JS 代码锁定了在 Controller 这一层，而对应的 View 层，主要是一些 DOM 操作，交给更加专业的前端来做。页面模板的渲染不同于传统做法放在了客户端来做，一开始采用的是流行的 <a href="http://mustache.github.io/">Mustache</a> 和 <a href="http://handlebarsjs.com/">Handlebars</a>，后来用 F7 自带的 <a href="http://www.idangero.us/framework7/docs/template7.html">Template7</a>。只需前后端将数据结构名称等约定好，前端开发用本地模拟数据，交付给后端后再换用真实数据，这样就完全地干掉了 JSP 等这些服务端的模板。目的很简单：<strong>让专业的人做专业的事</strong>。</p>

<h2 id="困难">困难</h2>

<p>这个项目做下来，很大的感受是让我们公司的 Java 开发们接受新事物比较困难。他们的理由有这么几点：</p>

<ol>
<li> 能用就行，这个没必要吧；</li>
<li> 这个不稳定吧，别把原来的给搞坏咯；</li>
<li> 这个不是太懂，感觉还是原来的好用（不想学习）。</li>
</ol>

<p><strong>后端相较前端而言，特别是金融行业，更加追求“稳定”二字，思维也更加封闭。</strong></p>

<p>好在我的坚持与据理力争，才使得目前公司移动端的项目从代码质量与开发效率这两个层面上都有所提升。<strong>可惜在推动分布式版本管理软件 Git 上我失败了</strong>，可能是自己没准备好，也可能是 Git 的学习成本真的太高了。但我还是不死心，我打算明年继续推动，不能像以前那样想一步到位了，先在自己负责的前端组全面实行，再推广到全公司。</p>

<p>随着券商客户的不断增加，项目的版本日渐增多，管理维护愈发的困难。<strong>版本管理，无论对前端还是后端，都是一个巨大的挑战</strong>。特别是前端，因为我们的后端服务，大部分是可以共用的，而前台界面，不仅要适应不同券商的不同功能而改动（后端需要改动），还要适应券商的个性化表现层的需求，比如字体颜色文字修改等等（后端无需改动）。</p>

<p><strong>前后端之间的衔接通道不畅通</strong>，这是就目前为止最令人苦恼的一件事了。目前我们的配合模式有两种：</p>

<p>一、<strong>前端们安装后端环境，跑后端服务来写前端页面</strong>。我是比较反感这样的做法的：</p>

<ol>
<li> 后端环境往往很重，配置依赖颇多，没有后端开发经验的话，难以驾驭；</li>
<li> 对前端开发调试不友好，由于基于后端提供的数据，不如自己模拟数据来的灵活；</li>
<li> 后端跑的 http 服务一般是 tomcat，这跟前端们自己的服务还是有差距的，缺少了比如 less 编译、浏览器 live reload 等功能，非常的不方便。</li>
</ol>

<p>二、而如果不这样做，<strong>前端后端拥有各自的开发环境</strong>，缺点也很明显：</p>

<ol>
<li> 这样一来，前端的产出物往往要通过后端二次包装（嵌套为 JSP，静态资源引用加版本号避免缓存等），一些前端资源的合并压缩，被放到了后端来做，做的不好不说，有时候甚至压根就没做；</li>
<li> 效率也很低，可以想象，每次前端的改动，无法直接应用到最终产品端，都要由后端通过前端的提交版本比对来进行修改。有时如果 SVN 出了点问题，历史版本被清空了， 就会变得比较棘手了。</li>
<li> 随着时间推移，后端加入了许多自己的代码，将许多的页面和 JS 都改的面目全非，与前端的版本越来越分离，会搞成后端不想动前端不想改的烂摊子。</li>
</ol>

<p>写代码的人很多，写文档的人太少。优先面向机器还是面向人，这是一个问题。</p>

<p>太过追求开发速度，不注重代码质量导致后期的 debug 成本过高。</p>

<h2 id="期望">期望</h2>

<p>对于刚起步的创业公司而言（如果三年也算刚起步），我觉得以上几点困难有些不是那么的要紧，毕竟“快上线”和“占领市场，占得先机”才是关键。但是要想做强做大，我相信迟早都是要直面这些问题的。</p>

<p><strong>版本管理</strong>的问题，有 Git 这把利刃。</p>

<p>而<strong>前后端分离</strong>，今年开始变成了一个热门话题，目前还都在实验阶段，比如淘宝的“中途岛”项目。相关的一些资料还比较少，我也是在摸着石头过河，希望明年能有一些突破。而突破的前提，看来是要多招一些能写好的 JS/NodeJS 的小伙伴们。</p>

<p>目前我们公司的开发们不仅要写服务端代码，而且还要写很大一部分客户端代码。估计一个项目中有一半的 JS，都是由后端开发写的。这算不算又是一个典型的<strong>让专业的人做专业的事</strong>的反例呢？</p>

<p>关于 JS 这块，需不需要专业的人来做，还有待评估。</p>

<p>这个问题也直接关系到位于客户端的业务逻辑代码，要不要由前端来介入甚至接管的问题（我相信在很多互联网大公司，这是理所当然的事情，这也是作为前端工程师的很大一部分的价值体现，所以他们的薪资一般也与后端开发们相当，这也是我目前<strong>最渴望招到“前端工程师”</strong>）。</p>

<p>看来其实核心问题是：<strong>要不要加钱加人在专业性上更上一层楼</strong>。当然这个是否必要，也看公司的具体情况，因为我也不敢保证，专业性上去了，公司的效益是否也能成比例增长，这个很难讲（至少“效”会提升吧？）。</p>

<p>加钱招人是一条路，但斯以为，人海战术固然可行，可<strong>在开发效率上提升一些岂不是更好</strong>？打一个比方：测试MM抱怨出包繁琐，容易出错。是否有人愿意跳出来，写一个自动化的打包服务造福于团队？</p>

<h2 id="团队">团队</h2>

<p>今年新招的应届生MM，我还是比较满意的。思路清晰，一点就通，平日里也较积极主动，就是有时候比较马虎。比如有一次跑来问我：为什么 <code>rake generate</code> 的命令报错。我一看原来是 generate 的单词她拼错了。</p>

<p>另一位前端GG，稍令人担忧一些。老请假是一方面，解决问题的思路也是不尽如人意，依赖性太强了。好在底子还可以，这一年通过网厅的项目，也得到了不少的锻炼。</p>

<p>带人对我来说也是一项挑战，我总是跟我的组员强调，要有工程师的思维，要有解决问题的能力，要有自身的价值体现。我希望我的组员不仅仅是制作页面的“切图仔”，要对得起<strong>“前端工程师”</strong>的名号。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端编码风格规范之 JavaScript 规范]]></title>
    <link href="http://roshanca.com/2014/web-develop-styleguide-javascript"/>
    <updated>2014-09-12T00:00:00+00:00</updated>
    <id>http://roshanca.com/2014/web-develop-styleguide-javascript</id>
    <content type="html"><![CDATA[<p>原文：<a href="https://github.com/gionkunz/chartist-js/blob/develop/CODINGSTYLE.md">Web Styleguide - Style guide to harmonize HTML, Javascript and CSS / SASS coding style</a></p>

<h2 id="javascript-规范">JavaScript 规范</h2>

<hr>

<h3 id="全局命名空间污染与-iife">全局命名空间污染与 IIFE</h3>

<p>总是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，用以创建独立隔绝的定义域。这一举措可防止全局命名空间被污染。</p>

<p>IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="c1">// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this</span>
<span class="c1">// will be stored in the window object. This is very unclean and needs to be avoided.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// We declare a IIFE and pass parameters into the function that we will use from the global space</span>
<span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
      <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

  <span class="c1">// Will output &#39;true true&#39;</span>
  <span class="nx">log</span><span class="p">((</span><span class="nx">w</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">y</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">));</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">,</span> <span class="nb">window</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="iife（立即执行的函数表达式）">IIFE（立即执行的函数表达式）</h3>

<p>无论何时，想要创建一个新的封闭的定义域，那就用 IIFE。它不仅避免了干扰，也使得内存在执行完后立即释放。</p>

<p>所有脚本文件建议都从 IIFE 开始。</p>

<p>立即执行的函数表达式的执行括号应该写在外包括号内。虽然写在内还是写在外都是有效的，但写在内使得整个表达式看起来更像一个整体，因此推荐这么做。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(){})();</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(){}());</span>
</code></pre></div>
<p>so，用下列写法来格式化你的 IIFE 代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="c1">// Code goes here</span>

<span class="p">}());</span>
</code></pre></div>
<p>如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">d</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">w</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="严格模式">严格模式</h3>

<p>ECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。</p>

<p>严格模式会阻止使用在未来很可能被引入的预留关键字。</p>

<p>你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// Script starts here</span>
<span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span><span class="p">(){</span>

  <span class="c1">// Your code starts here</span>

<span class="p">}());</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="c1">// Your code starts here</span>

<span class="p">}());</span>
</code></pre></div>
<hr>

<h3 id="变量声明">变量声明</h3>

<p>总是使用 <code>var</code> 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，这将对变量难以控制。如果没有声明，变量处于什么定义域就变得不清（可以是在 Document 或 Window 中，也可以很容易地进入本地定义域）。所以，请总是使用 var 来声明变量。</p>

<p>采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。</p>

<p><strong>不推</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nx">y</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div>
<hr>

<h3 id="理解-javascript-的定义域和定义域提升">理解 JavaScript 的定义域和定义域提升</h3>

<p>在 JavaScript 中变量和方法定义会自动提升到执行之前。JavaScript 只有 function 级的定义域，而无其他很多编程语言中的块定义域，所以使得你在某一 function 内的某语句和循环体中定义了一个变量，此变量可作用于整个 function 内，而不仅仅是在此语句或循环体中，因为它们的声明被 JavaScript 自动提升了。</p>

<p>我们通过例子来看清楚这到底是怎么一回事：</p>

<p><strong>原 function</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">a</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>
    <span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="nx">f</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">x</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Mr. X!&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">x</span><span class="p">();</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<p><strong>被 JS 提升过后</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
  <span class="c1">// All variables used in the closure will be hoisted to the top of the function</span>
  <span class="kd">var</span> <span class="nx">a</span><span class="p">,</span>
      <span class="nx">i</span><span class="p">,</span>
      <span class="nx">b</span><span class="p">,</span>
      <span class="nx">f</span><span class="p">;</span>
  <span class="c1">// All functions in the closure will be hoisted to the top</span>
  <span class="kd">function</span> <span class="nx">x</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Mr. X!&#39;</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">a</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>
    <span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Function assignments will only result in hoisted variables but the function body will not be hoisted</span>
    <span class="c1">// Only by using a real function declaration the whole function will be hoisted with its body</span>
    <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="nx">f</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">x</span><span class="p">();</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<p>根据以上提升过程，你是否可理解以下代码？</p>

<p><strong>有效代码</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="nx">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

  <span class="nx">x</span><span class="p">();</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">a</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="nx">f</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">f</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">x</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Mr. X!&#39;</span><span class="p">);</span>
  <span class="p">}</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<p>正如你所看到的这段令人充满困惑与误解的代码导致了出人意料的结果。只有良好的声明习惯，也就是下一章节我们要提到的声明规则，才能尽可能的避免这类错误风险。</p>

<hr>

<p>提升声明</p>

<p>为避免上一章节所述的变量和方法定义被自动提升造成误解，把风险降到最低，我们应该手动地显示地去声明变量与方法。也就是说，所有的变量以及方法，应当定义在 function 内的首行。</p>

<p>只用一个 <code>var</code> 关键字声明，多个变量用逗号隔开。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>

  <span class="p">}</span>

  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">d</span> <span class="o">*</span> <span class="nx">d</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">());</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
      <span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
      <span class="nx">i</span><span class="p">,</span>
      <span class="nx">c</span><span class="p">,</span>
      <span class="nx">d</span><span class="p">,</span>
      <span class="nx">x</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>

  <span class="p">}</span>

  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>



  <span class="nx">d</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  <span class="nx">x</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">d</span> <span class="o">*</span> <span class="nx">d</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">());</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<p>把赋值尽量写在变量申明中。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span>
    <span class="nx">b</span><span class="p">,</span>
    <span class="nx">c</span><span class="p">;</span>

<span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">c</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
    <span class="nx">c</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div>
<h3 id="总是使用带类型判断的比较判断">总是使用带类型判断的比较判断</h3>

<p>总是使用 <code>===</code> 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。</p>

<p>如果你使用 <code>===</code> 操作符，那比较的双方必须是同一类型为前提的条件下才会有效。</p>

<p>如果你想了解更多关于强制类型转换的信息，你可以读一读 <a href="http://dmitrysoshnikov.com/notes/note-2-ecmascript-equality-operators/">Dmitry Soshnikov 的这篇文章</a>。</p>

<p>在只使用 <code>==</code> 的情况下，JavaScript 所带来的强制类型转换使得判断结果跟踪变得复杂，下面的例子可以看出这样的结果有多怪了：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;0&#39;</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;&#39;</span> <span class="o">==</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">==</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nx">log</span><span class="p">(</span><span class="kc">null</span> <span class="o">==</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">valueOf</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s1">&#39;X&#39;</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">==</span> <span class="s1">&#39;X&#39;</span><span class="p">);</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="明智地使用真假判断">明智地使用真假判断</h3>

<p>当我们在一个 if 条件语句中使用变量或表达式时，会做真假判断。<code>if(a == true)</code> 是不同于 <code>if(a)</code> 的。后者的判断比较特殊，我们称其为真假判断。这种判断会通过特殊的操作将其转换为 true 或 false，下列表达式统统返回 false：<code>false</code>, <code>0</code>, <code>undefined</code>, <code>null</code>, <code>NaN</code>, <code>&#39;&#39;</code>（空字符串）.</p>

<p>这种真假判断在我们只求结果而不关心过程的情况下，非常的有帮助。</p>

<p>以下示例展示了真假判断是如何工作的：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="nx">expr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">expr</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;truthy&#39;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;falsy&#39;</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// truthy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// truthy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">({});</span> <span class="c1">// truthy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">([]);</span> <span class="c1">// truthy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">);</span> <span class="c1">// truthy</span>

  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">// falsy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// falsy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span> <span class="c1">// falsy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span> <span class="c1">// falsy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span> <span class="c1">// falsy</span>
  <span class="nx">logTruthyFalsy</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// falsy</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="变量赋值时的逻辑操作">变量赋值时的逻辑操作</h3>

<p>逻辑操作符 <code>||</code> 和 <code>&amp;&amp;</code> 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">||</span> <span class="nx">y</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>
<p>这一小技巧经常用来给方法设定默认的参数。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>

    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Result &#39;</span> <span class="o">+</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">multiply</span><span class="p">();</span> <span class="c1">// Result 1</span>
  <span class="nx">multiply</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// Result 10</span>
  <span class="nx">multiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">NaN</span><span class="p">);</span> <span class="c1">// Result 3</span>
  <span class="nx">multiply</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// Result 45</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="分号">分号</h3>

<p>总是使用分号，因为隐式的代码嵌套会引发难以察觉的问题。当然我们更要从根本上来杜绝这些问题<sup>[1]</sup> 。以下几个示例展示了缺少分号的危害：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// 1.</span>
<span class="nx">MyClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">myMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
<span class="p">}</span>  <span class="c1">// No semicolon here.</span>

<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Some initialization code wrapped in a function to create a scope for locals.</span>
<span class="p">})();</span>


<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;i&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="s1">&#39;j&#39;</span><span class="o">:</span> <span class="mi">2</span>
<span class="p">}</span>  <span class="c1">// No semicolon here.</span>

<span class="c1">// 2.  Trying to do one thing on Internet Explorer and another on Firefox.</span>
<span class="c1">// I know you&#39;d never write code like this, but throw me a bone.</span>
<span class="p">[</span><span class="nx">ffVersion</span><span class="p">,</span> <span class="nx">ieVersion</span><span class="p">][</span><span class="nx">isIE</span><span class="p">]();</span>


<span class="kd">var</span> <span class="nx">THINGS_TO_EAT</span> <span class="o">=</span> <span class="p">[</span><span class="nx">apples</span><span class="p">,</span> <span class="nx">oysters</span><span class="p">,</span> <span class="nx">sprayOnCheese</span><span class="p">]</span>  <span class="c1">// No semicolon here.</span>

<span class="c1">// 3. conditional execution a la bash</span>
<span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="nx">resultOfOperation</span><span class="p">()</span> <span class="o">||</span> <span class="nx">die</span><span class="p">();</span>
</code></pre></div>
<p><strong>So what happens?</strong></p>

<ol>
<li>JavaScript 错误 —— 首先返回 42 的那个 function 被第二个 function 当中参数传入调用，接着数字 42 也被“调用”而导致出错。</li>
<li>八成你会得到 &lsquo;no such property in undefined&rsquo; 的错误提示，因为在真实环境中的调用是这个样子：<code>x[ffVersion, ieVersion][isIE]()</code>.</li>
<li><code>die</code> 总是被调用。因为数组减 1 的结果是 <code>NaN</code>，它不等于任何东西（无论 <code>resultOfOperation</code> 是否返回 <code>NaN</code>）。所以最终的结果是 <code>die()</code> 执行完所获得值将赋给 <code>THINGS_TO_EAT</code>.</li>
</ol>

<p><strong>Why?</strong></p>

<p>JavaScript 中语句要以分号结束，否则它将会继续执行下去，不管换不换行。以上的每一个示例中，函数声明或对象或数组，都变成了在一句语句体内。要知道闭合圆括号并不代表语句结束，JavaScript 不会终结语句，除非它的下一个 token 是一个中缀符<sup>[2]</sup> 或者是圆括号操作符。</p>

<p>这真是让人大吃一惊，所以乖乖地给语句末加上分号吧。</p>

<p><strong>澄清：分号与函数</strong></p>

<p>分号需要用在表达式的结尾，而并非函数声明的结尾。区分它们最好的例子是：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">};</span>  <span class="c1">// semicolon here.</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>  <span class="c1">// no semicolon here.</span>
</code></pre></div>
<hr>

<h3 id="嵌套函数">嵌套函数</h3>

<p>嵌套函数是非常有用的，比如用在持续创建和隐藏辅助函数的任务中。你可以非常自由随意地使用它们。</p>

<hr>

<h3 id="语句块内的函数声明">语句块内的函数声明</h3>

<p>切勿在语句块内声明函数，在 ECMAScript 5 的严格模式下，这是不合法的。函数声明应该在定义域的顶层。但在语句块内可将函数申明转化为函数表达式赋值给变量。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<h3 id="异常">异常</h3>

<p>基本上你无法避免出现异常，特别是在做大型开发时（使用应用开发框架等等）。</p>

<p>在没有自定义异常的情况下，从有返回值的函数中返回错误信息一定非常的棘手，更别提多不优雅了。不好的解决方案包括了传第一个引用类型来接纳错误信息，或总是返回一个对象列表，其中包含着可能的错误对象。以上方式基本上是比较简陋的异常处理方式。适时可做自定义异常处理。</p>

<p>在复杂的环境中，你可以考虑抛出对象而不仅仅是字符串（默认的抛出值）。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">name</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;System Error&#39;</span><span class="p">,</span>
    <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;A name should always be specified!&#39;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<h3 id="标准特性">标准特性</h3>

<p>总是优先考虑使用标准特性。为了最大限度地保证扩展性与兼容性，总是首选标准的特性，而不是非标准的特性（例如：首选 <code>string.charAt(3)</code> 而不是 <code>string[3]</code>；首选 DOM 的操作方法来获得元素引用，而不是某一应用特定的快捷方法）。</p>

<hr>

<h3 id="简易的原型继承">简易的原型继承</h3>

<p>如果你想在 JavaScript 中继承你的对象，请遵循一个简易的模式来创建此继承。如果你预计你会遇上复杂对象的继承，那可以考虑采用一个继承库，比如 <a href="https://github.com/rauschma/proto-js">Proto.js by Axel Rauschmayer</a>.</p>

<p>简易继承请用以下方式：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="c1">// Constructor function</span>
  <span class="kd">function</span> <span class="nx">Apple</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// Defining a method of apple</span>
  <span class="nx">Apple</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">eat</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Eating &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="c1">// Constructor function</span>
  <span class="kd">function</span> <span class="nx">GrannySmithApple</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Invoking parent constructor</span>
    <span class="nx">Apple</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;Granny Smith&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="c1">// Set parent prototype while creating a copy with Object.create</span>
  <span class="nx">GrannySmithApple</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Apple</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
  <span class="c1">// Set constructor to the sub type, otherwise points to Apple</span>
  <span class="nx">GrannySmithApple</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">GrannySmithApple</span><span class="p">;</span>

  <span class="c1">// Calling a super method</span>
  <span class="nx">GrannySmithApple</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">eat</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Be sure to apply it onto our current object with call(this)</span>
    <span class="nx">Apple</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">eat</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Poor Grany Smith&#39;</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="c1">// Instantiation</span>
  <span class="kd">var</span> <span class="nx">apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Apple</span><span class="p">(</span><span class="s1">&#39;Test Apple&#39;</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">grannyApple</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GrannySmithApple</span><span class="p">();</span>

  <span class="nx">log</span><span class="p">(</span><span class="nx">apple</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Test Apple</span>
  <span class="nx">log</span><span class="p">(</span><span class="nx">grannyApple</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Granny Smith</span>

  <span class="c1">// Instance checks</span>
  <span class="nx">log</span><span class="p">(</span><span class="nx">apple</span> <span class="k">instanceof</span> <span class="nx">Apple</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nx">log</span><span class="p">(</span><span class="nx">apple</span> <span class="k">instanceof</span> <span class="nx">GrannySmithApple</span><span class="p">);</span> <span class="c1">// false</span>

  <span class="nx">log</span><span class="p">(</span><span class="nx">grannyApple</span> <span class="k">instanceof</span> <span class="nx">Apple</span><span class="p">);</span> <span class="c1">// true</span>
  <span class="nx">log</span><span class="p">(</span><span class="nx">grannyApple</span> <span class="k">instanceof</span> <span class="nx">GrannySmithApple</span><span class="p">);</span> <span class="c1">// true</span>

  <span class="c1">// Calling method that calls super method</span>
  <span class="nx">grannyApple</span><span class="p">.</span><span class="nx">eat</span><span class="p">();</span> <span class="c1">// Eating Granny Smith\nPoor Grany Smith</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="使用闭包">使用闭包</h3>

<p>闭包的创建也许是 JS 最有用也是最易被忽略的能力了。<a href="http://jibbering.com/faq/faq_notes/closures.html">关于闭包如何工作的合理解释</a>。</p>

<hr>

<h3 id="切勿在循环中创建函数">切勿在循环中创建函数</h3>

<p>在简单的循环语句中加入函数是非常容易形成闭包而带来隐患的。下面的例子就是一个典型的陷阱：</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">,</span> <span class="nx">w</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="c1">// numbers and i is defined in the current function closure</span>
  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
      <span class="nx">i</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">w</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// At the moment when this gets executed the i variable, coming from the outer function scope</span>
      <span class="c1">// is set to 3 and the current program is alerting the message 3 times</span>
      <span class="c1">// &#39;Index 3 with number undefined</span>
      <span class="c1">// If you understand closures in javascript you know how to deal with those cases</span>
      <span class="c1">// It&#39;s best to just avoid functions / new closures in loops as this prevents those issues</span>

      <span class="nx">w</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Index &#39;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39; with number &#39;</span> <span class="o">+</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">,</span> <span class="nb">window</span><span class="p">));</span>
</code></pre></div>
<p>接下来的改进虽然已经解决了上述例子中的问题或 bug，但还是违反了不在循环中创建函数或闭包的原则。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">,</span> <span class="nx">w</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="c1">// numbers and i is defined in the current function closure</span>
  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
      <span class="nx">i</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Creating a new closure scope with an IIFE solves the problem</span>
    <span class="c1">// The delayed function will use index and number which are</span>
    <span class="c1">// in their own closure scope (one closure per loop iteration).</span>
    <span class="c1">// ---</span>
    <span class="c1">// Still this is not recommended as we violate our rule to not</span>
    <span class="c1">// create functions within loops and we are creating two!</span>

    <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">number</span><span class="p">){</span>
      <span class="nx">w</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Will output as expected 0 &gt; 1, 1 &gt; 2, 2 &gt; 3</span>
        <span class="nx">w</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Index &#39;</span> <span class="o">+</span> <span class="nx">index</span> <span class="o">+</span> <span class="s1">&#39; with number &#39;</span> <span class="o">+</span> <span class="nx">number</span><span class="p">);</span>
      <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]));</span>
  <span class="p">}</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">,</span> <span class="nb">window</span><span class="p">));</span>
</code></pre></div>
<p>接下来的改进已解决问题，而且也遵循了规范。可是，你会发现看上去似乎过于复杂繁冗了，应该会有更好的解决方案吧。</p>

<p><strong>不完全推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">,</span> <span class="nx">w</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="c1">// numbers and i is defined in the current function closure</span>
  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
      <span class="nx">i</span><span class="p">;</span>

  <span class="c1">// Create a function outside of the loop that will accept arguments to create a</span>
  <span class="c1">// function closure scope. This function will return a function that executes in this</span>
  <span class="c1">// closure parent scope.</span>
  <span class="kd">function</span> <span class="nx">alertIndexWithNumber</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">w</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Index &#39;</span> <span class="o">+</span> <span class="nx">index</span> <span class="o">+</span> <span class="s1">&#39; with number &#39;</span> <span class="o">+</span> <span class="nx">number</span><span class="p">);</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="c1">// First parameter is a function call that returns a function.</span>
  <span class="c1">// ---</span>
  <span class="c1">// This solves our problem and we don&#39;t create a function inside our loop</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">w</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">alertIndexWithNumber</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]),</span> <span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">,</span> <span class="nb">window</span><span class="p">));</span>
</code></pre></div>
<p>将循环语句转换为函数执行的方式问题能得到立马解决，每一次循环都会对应地创建一次闭包。函数式的风格更加值得推荐，而且看上去也更加地自然和可预料。</p>

<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">,</span> <span class="nx">w</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="c1">// numbers and i is defined in the current function closure</span>
  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
      <span class="nx">i</span><span class="p">;</span>

  <span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">w</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">w</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Index &#39;</span> <span class="o">+</span> <span class="nx">index</span> <span class="o">+</span> <span class="s1">&#39; with number &#39;</span> <span class="o">+</span> <span class="nx">number</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
  <span class="p">});</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">,</span> <span class="nb">window</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="eval-函数（魔鬼）">eval 函数（魔鬼）</h3>

<p><code>eval()</code> 不但混淆语境还很危险，总会有比这更好、更清晰、更安全的另一种方案来写你的代码，因此尽量不要使用 evil 函数。</p>

<hr>

<h3 id="this-关键字">this 关键字</h3>

<p>只在对象构造器、方法和在设定的闭包中使用 <code>this</code> 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 <code>call()</code> 和 <code>apply()</code> 执行和调用时）。</p>

<p>正因为它是如此容易地被搞错，请限制它的使用场景：</p>

<ul>
<li>  在构造函数中</li>
<li>  在对象的方法中（包括由此创建出的闭包内）</li>
</ul>

<hr>

<h3 id="首选函数式风格">首选函数式风格</h3>

<p>函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。</p>

<p>接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。</p>

<p>例外：往往在重代码性能轻代码维护的情况之下，要选择最优性能的解决方案而非维护性高的方案（比如用简单的循环语句代替 forEach）。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span>
      <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
      <span class="nx">i</span><span class="p">;</span>


  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
  <span class="p">}</span>

  <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The sum of array &#39;</span> <span class="o">+</span> <span class="nx">arr</span> <span class="o">+</span> <span class="s1">&#39; is: &#39;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">)</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">20</span><span class="p">];</span>

  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">prevValue</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">prevValue</span> <span class="o">+</span> <span class="nx">currentValue</span><span class="p">;</span>
  <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>

  <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The sum of array &#39;</span> <span class="o">+</span> <span class="nx">arr</span> <span class="o">+</span> <span class="s1">&#39; is: &#39;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">);</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<p>另一个例子通过某一规则对一个数组进行过滤匹配来创建一个新的数组。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
      <span class="nx">numbersGreaterTen</span> <span class="o">=</span> <span class="p">[],</span>
      <span class="nx">i</span><span class="p">;</span>


  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">numbersGreaterTen</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;From the list of numbers &#39;</span> <span class="o">+</span> <span class="nx">numbers</span> <span class="o">+</span> <span class="s1">&#39; only &#39;</span> <span class="o">+</span> <span class="nx">numbersGreaterTen</span> <span class="o">+</span> <span class="s1">&#39; are greater than ten&#39;</span><span class="p">);</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>

  <span class="kd">var</span> <span class="nx">numbersGreaterTen</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">element</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">;</span>
  <span class="p">});</span>

  <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;From the list of numbers &#39;</span> <span class="o">+</span> <span class="nx">numbers</span> <span class="o">+</span> <span class="s1">&#39; only &#39;</span> <span class="o">+</span> <span class="nx">numbersGreaterTen</span> <span class="o">+</span> <span class="s1">&#39; are greater than ten&#39;</span><span class="p">);</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="使用-ecma-script-5">使用 ECMA Script 5</h3>

<p>建议使用 ECMA Script 5 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。</p>

<hr>

<h3 id="数组和对象的属性迭代">数组和对象的属性迭代</h3>

<p>用 ECMA5 的迭代方法来迭代数组。使用 <code>Array.forEach</code> 或者如果你要在特殊场合下中断迭代，那就用 <code>Array.every</code>。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

  <span class="c1">// Iterate over an array and break at a certain condition</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">].</span><span class="nx">every</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="nx">element</span> <span class="o">+</span> <span class="s1">&#39; at index &#39;</span> <span class="o">+</span> <span class="nx">index</span> <span class="o">+</span> <span class="s1">&#39; in array &#39;</span> <span class="o">+</span> <span class="nx">arr</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">!==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="c1">// Defining a simple javascript object</span>
  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">a</span><span class="o">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span>
    <span class="nx">b</span><span class="o">:</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span>
    <span class="s1">&#39;c-d-e&#39;</span><span class="o">:</span> <span class="s1">&#39;CDE&#39;</span>
  <span class="p">};</span>

  <span class="c1">// Iterating over the object keys</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Key &#39;</span> <span class="o">+</span> <span class="nx">element</span> <span class="o">+</span> <span class="s1">&#39; has value &#39;</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">element</span><span class="p">]);</span>
  <span class="p">});</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">));</span>
</code></pre></div>
<hr>

<h3 id="不要使用-switch">不要使用 switch</h3>

<p>switch 在所有的编程语言中都是个非常错误的难以控制的语句，建议用 if else 来替换它。</p>

<hr>

<h3 id="数组和对象字面量">数组和对象字面量</h3>

<p>用数组和对象字面量来代替数组和对象构造器。数组构造器很容易让人在它的参数上犯错。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// Length is 3.</span>
<span class="kd">var</span> <span class="nx">a1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">x1</span><span class="p">,</span> <span class="nx">x2</span><span class="p">,</span> <span class="nx">x3</span><span class="p">);</span>

<span class="c1">// Length is 2.</span>
<span class="kd">var</span> <span class="nx">a2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">x1</span><span class="p">,</span> <span class="nx">x2</span><span class="p">);</span>

<span class="c1">// If x1 is a number and it is a natural number the length will be x1.</span>
<span class="c1">// If x1 is a number but not a natural number this will throw an exception.</span>
<span class="c1">// Otherwise the array will have one element with x1 as its value.</span>
<span class="kd">var</span> <span class="nx">a3</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">x1</span><span class="p">);</span>

<span class="c1">// Length is 0.</span>
<span class="kd">var</span> <span class="nx">a4</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</code></pre></div>
<p>正因如此，如果将代码传参从两个变为一个，那数组很有可能发生意料不到的长度变化。为避免此类怪异状况，请总是采用更多可读的数组字面量。</p>

<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="nx">x1</span><span class="p">,</span> <span class="nx">x2</span><span class="p">,</span> <span class="nx">x3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">a2</span> <span class="o">=</span> <span class="p">[</span><span class="nx">x1</span><span class="p">,</span> <span class="nx">x2</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">a3</span> <span class="o">=</span> <span class="p">[</span><span class="nx">x1</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">a4</span> <span class="o">=</span> <span class="p">[];</span>
</code></pre></div>
<p>对象构造器不会有类似的问题，但是为了可读性和统一性，我们应该使用对象字面量。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">o2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
<span class="nx">o2</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">o2</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nx">o2</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">o2</span><span class="p">[</span><span class="s1">&#39;strange key&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div>
<p>应该写成这样：</p>

<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>

<span class="kd">var</span> <span class="nx">o2</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">a</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="nx">b</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">c</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="s1">&#39;strange key&#39;</span><span class="o">:</span> <span class="mi">3</span>
<span class="p">};</span>
</code></pre></div>
<hr>

<h3 id="修改内建对象的原型链">修改内建对象的原型链</h3>

<p>修改内建的诸如 <code>Object.prototype</code> 和 <code>Array.prototype</code> 是被严厉禁止的。修改其它的内建对象比如 <code>Function.prototype</code>，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。</p>

<hr>

<h3 id="自定义-tostring()-方法">自定义 toString() 方法</h3>

<p>你可以通过自定义 <code>toString()</code> 来控制对象字符串化。这很好，但你必须保证你的方法总是成功并不会有其它副作用。如果你的方法达不到这样的标准，那将会引发严重的问题。如果 <code>toString()</code> 调用了一个方法，这个方法做了一个断言<sup>[3]</sup> ，当断言失败，它可能会输出它所在对象的名称，当然对象也需要调用 <code>toString()</code>。</p>

<hr>

<h3 id="圆括号">圆括号</h3>

<p>一般在语法和语义上真正需要时才谨慎地使用圆括号。不要用在一元操作符上，例如 <code>delete</code>, <code>typeof</code> 和 <code>void</code>，或在关键字之后，例如 <code>return</code>, <code>throw</code>, <code>case</code>, <code>new</code> 等。</p>

<hr>

<h3 id="字符串">字符串</h3>

<p>统一使用单引号(&rsquo;)，不使用双引号(&ldquo;)。这在创建 HTML 字符串非常有好处：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s1">&#39;This is some HTML &lt;div class=&quot;makes-sense&quot;&gt;&lt;/div&gt;&#39;</span><span class="p">;</span>
</code></pre></div>
<hr>

<h3 id="三元条件判断（if-的快捷方法）">三元条件判断（if 的快捷方法）</h3>

<p>用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s1">&#39;valid&#39;</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s1">&#39;invalid&#39;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">return</span> <span class="nx">x</span> <span class="o">===</span> <span class="mi">10</span> <span class="o">?</span> <span class="s1">&#39;valid&#39;</span> <span class="o">:</span> <span class="s1">&#39;invalid&#39;</span><span class="p">;</span>
</code></pre></div>
<hr>

<p>[1]：作者指的是采用严格规范的语句写法，从根本上杜绝由分号缺失而引起的代码歧义。</p>

<p>[2]：中缀符，指的是像 <code>x + y</code> 中的 <code>+</code>。</p>

<p>[3]：断言一般指程序员在测试测序时的假设，一般是一些布尔表达式，当返回是 true 时，断言为真，代码运行会继续进行；如果条件判断为 false，代码运行停止，你的应用被终止。</p>

<hr>

<h2 id="系列文章">系列文章</h2>

<ul>
<li><a href="//roshanca.com/2014/web-develop-styleguide-general">前端编码风格规范之一般规范</a></li>
<li><a href="//roshanca.com/2014/web-develop-styleguide-html">前端编码风格规范之 HTML</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端编码风格规范之 HTML 规范]]></title>
    <link href="http://roshanca.com/2014/web-develop-styleguide-html"/>
    <updated>2014-09-09T00:00:00+00:00</updated>
    <id>http://roshanca.com/2014/web-develop-styleguide-html</id>
    <content type="html"><![CDATA[<p>原文：<a href="https://github.com/gionkunz/chartist-js/blob/develop/CODINGSTYLE.md">Web Styleguide - Style guide to harmonize HTML, Javascript and CSS / SASS coding style</a></p>

<h2 id="html-规范">HTML 规范</h2>

<hr>

<h3 id="文档类型">文档类型</h3>

<p>推荐使用 HTML5 的文档类型申明： <code>&lt;!DOCTYPE html&gt;</code>.</p>

<p>（建议使用 text/html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 <code>application/xhtml+xml</code> 在浏览器中的应用支持与优化空间都十分有限）。</p>

<p>HTML 中最好不要将无内容元素<sup>[1]</sup> 的标签闭合，例如：使用 <code>&lt;br&gt;</code> 而非 <code>&lt;br /&gt;</code>.</p>

<hr>

<h3 id="html-验证">HTML 验证</h3>

<p>一般情况下，建议使用能通过标准规范验证的 HTML 代码，除非在性能优化和控制文件大小上不得不做出让步。</p>

<p>使用诸如 W3C HTML validator 这样的工具来进行检测。</p>

<p>规范化的 HTML 是显现技术要求与局限的显著质量基线，它促进了 HTML 被更好地运用。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;title&gt;</span>Test<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;article&gt;</span>This is only a test.
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;title&gt;</span>Test<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;article&gt;</span>This is only a test.<span class="nt">&lt;/article&gt;</span>
</code></pre></div>
<h3 id="省略可选标签">省略可选标签</h3>

<p>HTML5 规范中规定了 HTML 标签是可以省略的。但从可读性来说，在开发的源文件中最好不要这样做，因为省略标签可能会导致一些问题。</p>

<p>省略一些可选的标签确实使得页面大小减少，这很有用，尤其是对于一些大型网站来说。为了达到这一目的，我们可以在开发后期对页面进行压缩处理，在这个环节中这些可选的标签完全就可以省略掉了。</p>

<hr>

<h3 id="脚本加载">脚本加载</h3>

<p>出于性能考虑，脚本异步加载很关键。一段脚本放置在 <code>&lt;head&gt;</code> 内，比如 <code>&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</code>，其加载会一直阻塞 DOM 解析，直至它完全地加载和执行完毕。这会造成页面显示的延迟。特别是一些重量级的脚本，对用户体验来说那真是一个巨大的影响。</p>

<p>异步加载脚本可缓解这种性能影响。如果只需兼容 IE10+，可将 HTML5 的 async 属性加至脚本中，它可防止阻塞 DOM 的解析，甚至你可以将脚本引用写在 <code>&lt;head&gt;</code> 里也没有影响。</p>

<p>如需兼容老旧的浏览器，实践表明可使用用来动态注入脚本的脚本加载器。你可以考虑 <a href="http://yepnopejs.com/">yepnope</a> 或 <a href="http://labjs.com/">labjs</a>。注入脚本的一个问题是：<a href="https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/">一直要等到 CSS 对象文档已就绪，它们才开始加载</a>（短暂地在 CSS 加载完毕之后），这就对需要及时触发的 JS 造成了一定的延迟，这多多少少也影响了用户体验吧。</p>

<p>终上所述，兼容老旧浏览器(IE9-)时，应该遵循以下最佳实践。</p>

<p>脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。而在现代浏览器中，脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。</p>

<p><strong>所有浏览器中，推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;main.css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="c">&lt;!-- body goes here --&gt;</span>

    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;main.js&quot;</span> <span class="na">async</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p><strong>只在现代浏览器中，推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;main.css&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;main.js&quot;</span> <span class="na">async</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="c">&lt;!-- body goes here --&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<hr>

<h3 id="语义化">语义化</h3>

<p>根据元素（有时被错误地称作“标签”）其被创造出来时的初始意义来使用它。打个比方，用 heading 元素来定义头部标题，p 元素来定义文字段落，用 a 元素来定义链接锚点，等等。</p>

<p>有根据有目的地使用 HTML 元素，对于可访问性、代码重用、代码效率来说意义重大。</p>

<p>以下示例列出了一些的语义化 HTML 主要情况：</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;b&gt;</span>My page title<span class="nt">&lt;/b&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;top-navigation&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nav-item&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#home&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nav-item&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#news&quot;</span><span class="nt">&gt;</span>News<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nav-item&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#about&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;news-page&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-section news&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>All news articles<span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;news-article&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2&gt;</span>Bad article<span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;intro&quot;</span><span class="nt">&gt;</span>Introduction sub-title<span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>This is a very bad example for HTML semantics<span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;article-side-notes&quot;</span><span class="nt">&gt;</span>I think I&#39;m more on the side and should not receive the main credits<span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;article-foot-notes&quot;</span><span class="nt">&gt;</span>
        This article was created by David <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;time&quot;</span><span class="nt">&gt;</span>2014-01-01 00:00<span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;section-footer&quot;</span><span class="nt">&gt;</span>
      Related sections: Events, Public holidays
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-footer&quot;</span><span class="nt">&gt;</span>
  Copyright 2014
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- The page header should go into a header element --&gt;</span>
<span class="nt">&lt;header&gt;</span>
  <span class="c">&lt;!-- As this title belongs to the page structure it&#39;s a heading and h1 should be used --&gt;</span>
  <span class="nt">&lt;h1&gt;</span>My page title<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/header&gt;</span>

<span class="c">&lt;!-- All navigation should go into a nav element --&gt;</span>
<span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;top-navigation&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- A listing of elements should always go to UL (OL for ordered listings) --&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-item&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#home&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-item&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#news&quot;</span><span class="nt">&gt;</span>News<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-item&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#about&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span>

<span class="c">&lt;!-- The main part of the page should go into a main element (also use role=&quot;main&quot; for accessibility) --&gt;</span>
<span class="nt">&lt;main</span> <span class="na">class=</span><span class="s">&quot;news-page&quot;</span> <span class="na">role=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. --&gt;</span>
  <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;page-section news&quot;</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- A section header should go into a section element --&gt;</span>
    <span class="nt">&lt;header&gt;</span>
      <span class="c">&lt;!-- As a page section belongs to the page structure heading elements should be used (in this case h2) --&gt;</span>
      <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>All news articles<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;/header&gt;</span>

    <span class="c">&lt;!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other</span>
<span class="c">     re-usable module / section that can occur multiple times on a page) a article element should be used --&gt;</span>
    <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">&quot;news-article&quot;</span><span class="nt">&gt;</span>
      <span class="c">&lt;!-- An article can contain a header that contains the summary / introduction information of the article --&gt;</span>
      <span class="nt">&lt;header&gt;</span>
        <span class="c">&lt;!-- As a article title does not belong to the overall page structure there should not be any heading tag! --&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;article-title&quot;</span><span class="nt">&gt;</span>Good article<span class="nt">&lt;/div&gt;</span>
        <span class="c">&lt;!-- Small can optionally be used to reduce importance --&gt;</span>
        <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;intro&quot;</span><span class="nt">&gt;</span>Introduction sub-title<span class="nt">&lt;/small&gt;</span>
      <span class="nt">&lt;/header&gt;</span>

      <span class="c">&lt;!-- For the main content in a section or article there is no semantic element --&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>This is a good example for HTML semantics<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="c">&lt;!-- For content that is represented as side note or less important information in a given context use aside --&gt;</span>
      <span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">&quot;article-side-notes&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>I think I&#39;m more on the side and should not receive the main credits<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/aside&gt;</span>
      <span class="c">&lt;!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element --&gt;</span>
      <span class="nt">&lt;footer</span> <span class="na">class=</span><span class="s">&quot;article-foot-notes&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time</span>
<span class="c">         while the actual text in the time element can also be more human readable / relative --&gt;</span>
        <span class="nt">&lt;p&gt;</span>This article was created by David <span class="nt">&lt;time</span> <span class="na">datetime=</span><span class="s">&quot;2014-01-01 00:00&quot;</span> <span class="na">class=</span><span class="s">&quot;time&quot;</span><span class="nt">&gt;</span>1 month ago<span class="nt">&lt;/time&gt;&lt;/p&gt;</span>
      <span class="nt">&lt;/footer&gt;</span>
    <span class="nt">&lt;/article&gt;</span>

    <span class="c">&lt;!-- In a section, footnotes or similar information can also go into a footer element --&gt;</span>
    <span class="nt">&lt;footer</span> <span class="na">class=</span><span class="s">&quot;section-footer&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p&gt;</span>Related sections: Events, Public holidays<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/footer&gt;</span>
  <span class="nt">&lt;/section&gt;</span>
<span class="nt">&lt;/main&gt;</span>

<span class="c">&lt;!-- Your page footer should go into a global footer element --&gt;</span>
<span class="nt">&lt;footer</span> <span class="na">class=</span><span class="s">&quot;page-footer&quot;</span><span class="nt">&gt;</span>
  Copyright 2014
<span class="nt">&lt;/footer&gt;</span>
</code></pre></div>
<hr>

<h3 id="多媒体回溯">多媒体回溯</h3>

<p>对页面上的媒体而言，像图片、视频、canvas 动画等，要确保其有可替代的接入接口。图片文件我们可采用有意义的备选文本（alt），视频和音频文件我们可以为其加上说明文字或字幕。</p>

<p>提供可替代内容对可用性来说十分重要。试想，一位盲人用户如何能知晓一张图片是什么，要是没有 @alt 的话。</p>

<p>（图片的 alt 属性是可不填写内容的，纯装饰性的图片就可用这么做：<code>alt=&quot;&quot;</code>）。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;luke-skywalker.jpg&quot;</span><span class="nt">&gt;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;luke-skywalker.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;Luke skywalker riding an alien horse&quot;</span><span class="nt">&gt;</span>
</code></pre></div>
<p>尽量用 alt 标签去描述图片，设想你需要对于那些只能通过语音或者看不见图片的用户表达图片到底是什么。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;huge-spaceship-approaching-earth.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;Header image&quot;</span><span class="nt">&gt;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;huge-spaceship-approaching-earth.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;A huge spaceship that is approaching the earth&quot;</span><span class="nt">&gt;</span>
</code></pre></div>
<hr>

<h3 id="关注点分离">关注点分离</h3>

<p>理解 web 中如何和为何区分不同的关注点，这很重要。这里的关注点主要指的是：信息（HTML 结构）、外观（CSS）和行为（JavaScript）。为了使它们成为可维护的干净整洁的代码，我们要尽可能的将它们分离开来。</p>

<p>严格地保证结构、表现、行为三者分离，并尽量使三者之间没有太多的交互和联系。</p>

<p>就是说，尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。</p>

<p>在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。</p>

<p>清晰的分层意味着：</p>

<ul>
<li>  不使用超过一到两张样式表（i.e. main.css, vendor.css）</li>
<li>  不使用超过一到两个脚本（学会用合并脚本）</li>
<li>  不使用行内样式（<code>&lt;style&gt;.no-good {}&lt;/style&gt;</code>）</li>
<li>  不在元素上使用 style 属性（<code>&lt;hr style=&quot;border-top: 5px solid black&quot;&gt;</code>）</li>
<li>  不使用行内脚本（<code>&lt;script&gt;alert(&#39;no good&#39;)&lt;/script&gt;</code>）</li>
<li>  不使用表象元素（i.e. <code>&lt;b&gt;</code>, <code>&lt;u&gt;</code>, <code>&lt;center&gt;</code>, <code>&lt;font&gt;</code>, <code>&lt;b&gt;</code>）</li>
<li>  不使用表象 class 名（i.e. red, left, center）</li>
</ul>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;base.css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;grid.css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;type.css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;modules/teaser.css&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">style=</span><span class="s">&quot;font-size: 3rem&quot;</span><span class="nt">&gt;&lt;/h1&gt;</span>
  <span class="nt">&lt;b&gt;</span>I&#39;m a subtitle and I&#39;m bold!<span class="nt">&lt;/b&gt;</span>
  <span class="nt">&lt;center&gt;</span>Dare you center me!<span class="nt">&lt;/center&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Just dont...&#39;</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;red&quot;</span><span class="nt">&gt;</span>I&#39;m important!<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="c">&lt;!-- Concatinate your style sheets into a single one --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;main.css&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="c">&lt;!-- Don&#39;t use style attributes but assign sensible classes and apply styles in the stylesheet --&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;&lt;/h1&gt;</span>
  <span class="c">&lt;!-- Don&#39;t use presentational elements and assign sensible classes --&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;sub-title&quot;</span><span class="nt">&gt;</span>I&#39;m a subtitle and I&#39;m bold!<span class="nt">&lt;/div&gt;</span>
  <span class="c">&lt;!-- Maybe your comments get centered in your presentation but that decision is up to the stylesheet --&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;comment&quot;</span><span class="nt">&gt;</span>Dare you center me!<span class="nt">&lt;/span&gt;</span>
  <span class="c">&lt;!-- You wanted to make it red because it&#39;s important so then also name the class important and decide in the stylesheet</span>
<span class="c">   what you want to do with it --&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;important&quot;</span><span class="nt">&gt;</span>I&#39;m important!<span class="nt">&lt;/div&gt;</span>

  <span class="c">&lt;!-- Put all your scripts into files and concatinate them into a single one --&gt;</span>
  <span class="nt">&lt;script </span><span class="na">async</span> <span class="na">src=</span><span class="s">&quot;main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<hr>

<h3 id="html-内容至上">HTML 内容至上</h3>

<p>不要让非内容信息污染了你的 HTML。现在貌似有一种倾向：通过 HTML 来解决设计问题，这是显然是不对的。HTML 就应该只关注内容。</p>

<p>HTML 标签的目的，就是为了不断地展示内容信息。</p>

<ul>
<li>  不要引入一些特定的 HTML 结构来解决一些视觉设计问题</li>
<li>  不要将 <code>img</code> 元素当做专门用来做视觉设计的元素</li>
</ul>

<p>以下例子展示了误将 HTML 用来解决设计问题的这两种情况：</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- We should not introduce an additional element just to solve a design problem  --&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;text-box&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;square&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
  See the square next to me?
<span class="nt">&lt;/span&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.text-box</span> <span class="o">&gt;</span> <span class="nc">.square</span> <span class="p">{</span>
  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- That&#39;s clean markup! --&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;text-box&quot;</span><span class="nt">&gt;</span>
  See the square next to me?
<span class="nt">&lt;/span&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="language-css" data-lang="css"><span class="c">/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */</span>
<span class="nc">.text-box</span><span class="nd">:before</span> <span class="p">{</span>
  <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- Content images should never be used for design elements!  --&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;text-box&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;square.svg&quot;</span> <span class="na">alt=</span><span class="s">&quot;Square&quot;</span> <span class="nt">/&gt;</span>
  See the square next to me?
<span class="nt">&lt;/span&gt;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- That&#39;s clean markup! --&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;text-box&quot;</span><span class="nt">&gt;</span>
  See the square next to me?
<span class="nt">&lt;/span&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="language-css" data-lang="css"><span class="c">/* We use a :before pseudo element with a background image to solve the problem */</span>
<span class="nc">.text-box</span><span class="nd">:before</span> <span class="p">{</span>
  <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
  <span class="k">width</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="k">height</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
  <span class="k">background</span><span class="o">:</span> <span class="sx">url(square.svg)</span> <span class="k">no-repeat</span><span class="p">;</span>
  <span class="k">background</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<h3 id="type-属性">Type 属性</h3>

<p>省略样式表与脚本上的 type 属性。鉴于 HTML5 中以上两者默认的 type 值就是 text/css 和 text/javascript，所以 type 属性一般是可以忽略掉的。甚至在老旧版本的浏览器中这么做也是安全可靠的。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;main.css&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;main.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;main.css&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<hr>

<h3 id="可用性">可用性</h3>

<p>如果 HTML5 语义化标签使用得当，许多可用性问题已经引刃而解。ARIA 规则在一些语义化的元素上可为其添上默认的可用性角色属性，使用得当的话已使网站的可用性大部分成立。假如你使用 <code>nav</code>, <code>aside</code>, <code>main</code>, <code>footer</code> 等元素，ARIA 规则会在其上应用一些关联的默认值。
更多细节可参考 <a href="http://rawgit.com/w3c/aria-in-html/master/index.html#recommendations-table">ARIA specification</a></p>

<p>另外一些角色属性则能够用来呈现更多可用性情景（i.e. <code>role=&quot;tab&quot;</code>）。</p>

<hr>

<h3 id="tab-index-在可用性上的运用">Tab Index 在可用性上的运用</h3>

<p>检查文档中的 tab 切换顺序并传值给元素上的 tabindex，这可以依据元素的重要性来重新排列其 tab 切换顺序。你可以设置 <code>tabindex=&quot;-1&quot;</code> 在任何元素上来禁用其 tab 切换。</p>

<p>当你在一个默认不可聚焦的元素上增加了功能，你应该总是为其加上 <code>tabindex</code> 属性使其变为可聚焦状态，而且这也会激活其 CSS 的伪类 <code>:focus</code>。选择合适的 <code>tabindex</code> 值，或是直接使用 <code>tabindex=&quot;0&quot;</code> 将元素们组织成同一 tab 顺序水平，并强制干预其自然阅读顺序。  </p>

<hr>

<h3 id="微格式在-seo-和可用性上的运用">微格式在 SEO 和可用性上的运用</h3>

<p>如果 SEO 和可用性环境条件允许的话，建议考虑采用微格式。微格式是通过在元素标签上申明一系列特定数据来达成特定语义的方法。</p>

<p>谷歌、微软和雅虎对如何使用这些额外的数据一定程度上的达成一致，如果正确的使用，这将给搜索引擎优化带来巨大的好处。</p>

<p>你可以访问 <a href="http://schema.org/">schema.org</a> 获得更多内容细节。</p>

<p>看一个电影网站的简单例子：</p>

<p><strong>不带微格式</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div&gt;</span>
 <span class="nt">&lt;h1&gt;</span>Avatar<span class="nt">&lt;/h1&gt;</span>
 <span class="nt">&lt;span&gt;</span>Director: James Cameron (born August 16, 1954)<span class="nt">&lt;/span&gt;</span>
 <span class="nt">&lt;span&gt;</span>Science fiction<span class="nt">&lt;/span&gt;</span>
 <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;../movies/avatar-theatrical-trailer.html&quot;</span><span class="nt">&gt;</span>Trailer<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p><strong>带有微格式</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">itemscope</span> <span class="na">itemtype =</span><span class="s">&quot;http://schema.org/Movie&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">itemprop=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>Avatar<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">itemprop=</span><span class="s">&quot;director&quot;</span> <span class="na">itemscope</span> <span class="na">itemtype=</span><span class="s">&quot;http://schema.org/Person&quot;</span><span class="nt">&gt;</span>
  Director: <span class="nt">&lt;span</span> <span class="na">itemprop=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>James Cameron<span class="nt">&lt;/span&gt;</span> (born <span class="nt">&lt;span</span> <span class="na">itemprop=</span><span class="s">&quot;birthDate&quot;</span><span class="nt">&gt;</span>August 16, 1954)<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">itemprop=</span><span class="s">&quot;genre&quot;</span><span class="nt">&gt;</span>Science fiction<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;../movies/avatar-theatrical-trailer.html&quot;</span> <span class="na">itemprop=</span><span class="s">&quot;trailer&quot;</span><span class="nt">&gt;</span>Trailer<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<hr>

<h3 id="id-和锚点">ID 和锚点</h3>

<p>通常一个比较好的做法是将页面内所有的头部标题元素都加上 ID. 这样做，页面 URL 的 hash 中带上对应的 ID 名称，即形成描点，方便跳转至对应元素所处位置。</p>

<p>打个比方，当你在浏览器中输入 URL <code>http://your-site.com/about#best-practices</code>，浏览器将定位至以下 H3 上。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">&quot;best-practices&quot;</span><span class="nt">&gt;</span>Best practices<span class="nt">&lt;/h3&gt;</span>
</code></pre></div>
<hr>

<h3 id="格式化规则">格式化规则</h3>

<p>在每一个块状元素，列表元素和表格元素后，加上一新空白行，并对其子孙元素进行缩进。内联元素写在一行内，块状元素还有列表和表格要另起一行。</p>

<p>（如果由于换行的空格引发了不可预计的问题，那将所有元素并入一行也是可以接受的，格式警告总好过错误警告）。</p>

<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;blockquote&gt;</span>
  <span class="nt">&lt;p&gt;&lt;em&gt;</span>Space<span class="nt">&lt;/em&gt;</span>, the final frontier.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;</span>Moe<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Larry<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Curly<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>

<span class="nt">&lt;table&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">&quot;col&quot;</span><span class="nt">&gt;</span>Income<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">&quot;col&quot;</span><span class="nt">&gt;</span>Taxes<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
  <span class="nt">&lt;tbody&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;td&gt;</span>$ 5.00<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;td&gt;</span>$ 4.50<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/tbody&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div>
<hr>

<h3 id="html-引号">HTML 引号</h3>

<p>使用双引号(&ldquo;&rdquo;) 而不是单引号(&ldquo;) 。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;news-article&#39;</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;news-article&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre></div>
<hr>

<p>[1]: 此处的空白元素指的是以下元素：<code>area</code>, <code>base</code>, <code>br</code>, <code>col</code>, <code>command</code>, <code>embed</code>, <code>hr</code>, <code>img</code>, <code>input</code>, <code>keygen</code>, <code>link</code>, <code>meta</code>, <code>param</code>, <code>source</code>, <code>track</code>, <code>wbr</code></p>

<hr>

<h2 id="系列文章">系列文章</h2>

<ul>
<li><a href="//roshanca.com/2014/web-develop-styleguide-general">前端编码风格规范之一般规范</a></li>
<li><a href="//roshanca.com/2014/web-develop-styleguide-javascript">前端编码风格规范之 JavaScript</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端编码风格规范之一般规范]]></title>
    <link href="http://roshanca.com/2014/web-develop-styleguide-general"/>
    <updated>2014-09-07T00:00:00+00:00</updated>
    <id>http://roshanca.com/2014/web-develop-styleguide-general</id>
    <content type="html"><![CDATA[<p>原文：<a href="https://github.com/gionkunz/chartist-js/blob/develop/CODINGSTYLE.md">Web Styleguide - Style guide to harmonize HTML, Javascript and CSS / SASS coding style</a></p>

<p>这是一份旨在增强团队的开发协作，提高代码质量和打造开发基石的编码风格规范，其中包含了 HTML, JavaScript 和 CSS/SCSS 这几个部分。</p>

<p>我们知道，当一个团队开始指定并实行编码规范的话，错误就会变得更加显而易见。如果一段特定的代码不符合规范的话，它有可能只是代码风格错误，而也有可能会是 bug。早期指定规范就使得代码审核得以更好的开展，并且可以更精确的地定位到错误。</p>

<p>只要开发者们能够保证源代码源文件都严格遵循规范，那接下去所使用的混淆、压缩和编译工具则可投其所好不尽相同。</p>

<hr>

<h2 id="一般规范">一般规范</h2>

<p>以下章节列举了一些可应用在 HTML, JavaScript 和 CSS/SCSS 上的通用规则。</p>

<hr>

<h3 id="文件/资源命名">文件/资源命名</h3>

<p>在 web 项目中，所有的文件名应该都遵循同一命名约定。以可读性而言，减号（-）是用来分隔文件名的不二之选。同时它也是常见的 URL 分隔符（i.e. <code>//example.com/blog/my-blog-entry</code> or <code>//s.example.com/images/big-black-background.jpg</code>），所以理所当然的，减号应该也是用来分隔资源名称的好选择。</p>

<p>请确保文件命名总是以字母开头而不是数字。而以特殊字符开头命名的文件，一般都有特殊的含义与用处（比如 compass<sup>[1]</sup> 中的下划线就是用来标记跳过直接编译的文件用的）。</p>

<p>资源的字母名称必须全为小写，这是因为在某些对大小写字母敏感的操作系统中，当文件通过工具压缩混淆后，或者人为修改过后，大小写不同而导致引用文件不同的错误，很难被发现。</p>

<p>还有一些情况下，需要对文件增加前后缀或特定的扩展名（比如 .min.js, .min.css），抑或一串前缀（比如 <code>3fa89b.main.min.css</code>）。这种情况下，建议使用点分隔符来区分这些在文件名中带有清晰意义的元数据。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">MyScript.js
myCamelCaseName.css
i_love_underscores.html
1001-scripts.js
my-file-min.css
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">my-script.js
my-camel-case-name.css
i-love-underscores.html
thousand-and-one-scripts.js
my-file.min.css
</code></pre></div>
<hr>

<h3 id="协议">协议</h3>

<p>不要指定引入资源所带的具体协议。</p>

<p>当引入图片或其他媒体文件，还有样式和脚本时，URLs 所指向的具体路径，不要指定协议部分（<code>http:</code>, <code>https:</code>），除非这两者协议都不可用。</p>

<p>不指定协议使得 URL 从绝对的获取路径转变为相对的，在请求资源协议无法确定时非常好用，而且还能为文件大小节省几个字节。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdn.com/foundation.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdn.com/foundation.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.example</span> <span class="p">{</span>
  <span class="k">background</span><span class="o">:</span> <span class="sx">url(http://static.example.com/images/bg.jpg)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.example</span> <span class="p">{</span>
  <span class="k">background</span><span class="o">:</span> <span class="sx">url(//static.example.com/images/bg.jpg)</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<h3 id="文本缩进">文本缩进</h3>

<p>一次缩进两个空格。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;</span>Fantastic<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Great<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Test<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">1100px</span><span class="o">)</span> <span class="p">{</span>
  <span class="nt">body</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">result</span><span class="o">:</span> <span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">)</span> <span class="o">*</span> <span class="nx">x</span>
    <span class="p">}</span>

  <span class="p">}</span>
<span class="p">}());</span>
</code></pre></div>
<hr>

<h3 id="注释">注释</h3>

<p>注释是<strong>你自己</strong>与你的小伙伴们了解代码写法和目的的唯一途径。特别是在写一些看似琐碎的无关紧要的代码时，由于记忆点不深刻，注释就变得尤为重要了。</p>

<p>编写自解释代码只是一个<strong>传说</strong>，没有任何代码是可以完全自解释的。而代码注释，则是永远也不嫌多。</p>

<p>当你写注释时一定要注意：不要写你的代码都干了些什么，而要写你的代码为什么要这么写，背后的考量是什么。当然也可以加入所思考问题或是解决方案的链接地址。</p>

<p><strong>不推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span><span class="p">(</span><span class="nx">includeLabels</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Add offset of 20</span>
  <span class="nx">offset</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>推荐</strong></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">if</span><span class="p">(</span><span class="nx">includeLabels</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// If the labels are included we need to have a minimum offset of 20 pixels</span>
  <span class="c1">// We need to set it explicitly because of the following bug: http://somebrowservendor.com/issue-tracker/ISSUE-1</span>
  <span class="nx">offset</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>一些注释工具可以帮助你写出更好的注释。<a href="http://usejsdoc.org/">JSDoc</a> 或 <a href="http://yui.github.io/yuidoc/">YUIDoc</a> 就是用来写 JavaScript 注释用的。你甚至可以使用工具来为这些注释生成文档，这也是激励开发者们写注释的一个好方法，因为一旦有了这样方便的生成文档的工具，他们通常会开始花更多时间在注释细节上。</p>

<hr>

<h3 id="代码检查">代码检查</h3>

<p>对于比较宽松自由的编程语言来说，严格遵循编码规范和格式化风格指南就显得极为重要。遵循规范固然很好，但是有自动化流程来确保其执行情况，岂不更佳。Trust is good, control is better.</p>

<p>对于 JavaScript，建议使用 <a href="http://www.jslint.com/">JSLint</a> 或 <a href="http://www.jshint.com/">JSHint</a>。</p>

<hr>

<p>[1]: Compass 是一个基于 Sass 开源的 CSS 框架，而 Sass 是一个非常流行的 CSS 预编译器。</p>

<hr>

<h2 id="系列文章">系列文章</h2>

<ul>
<li><a href="//roshanca.com/2014/web-develop-styleguide-html">前端编码风格规范之 HTML</a></li>
<li><a href="//roshanca.com/2014/web-develop-styleguide-javascript">前端编码风格规范之 JavaScript</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DIY 网件 R6300v2 路由器]]></title>
    <link href="http://roshanca.com/2014/diy-netgear-r6300v2"/>
    <updated>2014-05-11T21:41:00+00:00</updated>
    <id>http://roshanca.com/2014/diy-netgear-r6300v2</id>
    <content type="html"><![CDATA[<p>据说 Geek 都喜欢 <abbr title="Network Attached Storage">NAS</abbr> 与离线下载。</p>

<p>嗯，除此之外，我还偏爱无线媒体内容服务：AirPlay，DLNA 神马的。只要在家中无线覆盖到之处，无论是电视还手机，只要是网内设备，均可无线浏览播放 NAS 上的媒体资源，是我的追求。</p>

<p>网件 R6300v2 以其风骚的外形（电磁炉造型）、强大的硬件（ARM双核处理器800MHZ，256M内存 etc.）和领先的 AC 千兆无线路由协议，深深地吸引了我。入手把玩了一段时间后，发现它能给的和我想要的，距离还是相差那么一点点。</p>

<ul>
<li>  <strong>NAS</strong>：木有问题啦，USB 3.0/2.0 接口各一个，扩展无鸭梨。瓶颈主要在传输速率上：除了一台新买的 iPad 外，其余电子设备都太过老久，不支持 AC 千兆协议；</li>
<li>  <strong>离线下载</strong>：只支持 BT 下载&hellip; what？在迅雷一桶浆糊的天朝，这简直弱爆了；</li>
<li>  <strong>无线媒体内容服务</strong>：虽说支持了 DLNA 协议，可实际用下来，稳定性和实用性都欠佳。还有一点，<strong>不支持 MKV 内嵌字幕</strong>是硬伤啊，让哥肿么看欧美大片？？？</li>
</ul>

<p>还是那句老话：自己动手，丰衣足食。以此三点为目标，开始折腾。</p>

<h2 id="刷-dd-wrt-固件">刷 DD-WRT 固件</h2>

<p>原厂固件有什么不好？之前听说 R6300v2 自带固件网络不稳定，我好像没怎么碰到过。但 DD-WRT 的稳定性应该在它之上不用说，而且还支持 5G 网络的无线频道自动选择，这个是官方所不支持的。最为重要的一点是，它是上迅雷固件的先决条件。</p>

<p>刷机的整个过程，依照 <a href="http://luyou.xunlei.com/thread-426-1-1.html">http://luyou.xunlei.com/thread-426-1-1.html</a> 的教程，step by step 就行了，非常 easy~</p>

<p>附上固件下载地址（持续更新）：<a href="http://www.desipro.de/ddwrt/K3-AC-Arm/">http://www.desipro.de/ddwrt/K3-AC-Arm/</a></p>

<h2 id="刷迅雷固件">刷迅雷固件</h2>

<p>毫无疑问，这是为了实现离线下载。这里的指的离线下载，又比迅雷下载软件自带的离线功能，更高一级：后者是将资源离线下到迅雷的云端，而前者则直接下到路由挂载的硬盘上，接着通过无线内网直接读取，更加便利了。</p>

<p>同样，刷机的教程，网上也有，比如 <a href="http://luyou.xunlei.com/thread-768-1-1.html">http://luyou.xunlei.com/thread-768-1-1.html</a>.</p>

<p>但 Mac 用户有着天然的优势，根本无需用到此教程中的 winscp 和 putty 软件，下面就来看看如何用终端来取代它们的吧：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">ssh root@192.168.0.1
</code></pre></div>
<p>默认的路由 IP 一般是 <code>192.168.1.1</code>，我是为了连公司 VPN 时 IP 不与公司网段冲突而重新设置的 <code>192.168.0.1</code>。</p>

<p>接着提示你输入路由密码，应该就可以看到以下界面了：</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Photobucket%20Desktop%20-%20WuMacBookPro/Photobucket/ssh_zps5ef42e95.png" alt=""></p>

<p>新建一个终端窗口或者标签页，接下来把下载好的迅雷固件文件夹，拷贝至路由器的指定目录下：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">scp -P <span class="m">22</span> -r ~/Download/Xware1 root@192.168.0.1:/jffs/
</code></pre></div>
<p>再次输入密码，完成传输任务，切换回 ssh 界面，继续操作：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /jffs

<span class="c"># 将拷贝好的迅雷固件文件夹改名为 xunlei</span>
mv Xware1 xunlei

<span class="nb">cd </span>xunlei

<span class="c"># 给 xunlei 目录添加执行权限</span>
chmod <span class="m">777</span> * -R

<span class="c"># 启动迅雷离线服务</span>
./portal
</code></pre></div>
<p>其它步骤教程中都有，不再赘述。</p>

<p>完成后我就开始疯狂下载 1080p 的电影了。建议上班前挂上准备好的资源，到公司登录 <a href="http://yuancheng.xunlei.com">http://yuancheng.xunlei.com</a> 开始下载，下班后回到家就看片了，还是蛮不错的赶脚。家里 20M 的带宽，下载速度基本上有 2M 多吧。袄，忘了说，我是迅雷会员，非会员这速度可能要打个折扣。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Photobucket%20Desktop%20-%20WuMacBookPro/Photobucket/QQ20140429-12x_zps9f86c594.png" alt=""></p>

<h2 id="nas-">NAS <img style="display:inline;" src="http://www.iconsdb.com/icons/preview/caribbean-blue/nas-xxl.png" width="24" height="24" alt="NAS icon"></h2>

<p>普通的文件的共享，需开启 &ldquo;File Sharing&rdquo; 和 &ldquo;Samba Server&quot;，在路由管理界面（<code>http://192.168.0.1</code>）中的“服务 - NAS”下可以找到它们。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Photobucket%20Desktop%20-%20WuMacBookPro/Photobucket/filesharing_zpsa41ea46a.png" alt=""></p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Photobucket%20Desktop%20-%20WuMacBookPro/Photobucket/sambaserver_zpsb8360052.png" alt=""></p>

<p>需特别注意的是，PC 和 Mac 都必须将工作组设置成 <code>WORKGROUP</code>。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Photobucket%20Desktop%20-%20WuMacBookPro/Photobucket/workgroup_zps90ee0444.png" alt=""></p>

<h2 id="dlna-">DLNA <embed src="http://upload.wikimedia.org/wikipedia/en/f/f0/Dlna.svg" width="91" height="24" type="image/svg+xml" codebase="http://www.adobe.com/svg/viewer/install"></h2>

<p>如果家中电视支持 DLNA，那太赞了，开启路由 &quot;DLNA Server&quot;，直接在电视上欣赏路由 NAS 中的视频、照片、音乐吧。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Photobucket%20Desktop%20-%20WuMacBookPro/Photobucket/dlnaserver_zpsb8902bcb.png" alt=""> </p>

<p>经测试，DD-WRT 提供的 DLNA 服务更加稳定可靠，也许是因为 <code>Linux</code> 系统强大的缘故吧。<del>更为可喜的是，它还直接解决了 MKV 字幕的问题，妈妈再也不用担心我看不了欧美大片了。</del></p>

<h3 id="update">Update</h3>

<p>经测试，通过 DLNA 播放 <code>MKV</code> 视频，主要看接收端（电视）对于视频的支持，而并不取决于发布端（路由）。</p>

<p>我的家里有两台电视：Sony(KDL-47W800A) 和 LeTV(S40)，目前只有前者在使用 DLNA 播放视频时支持显示 <code>MKV</code> 内置字幕，对乐视略失望☹</p>

<p>对于一些比较老旧的设备，还有一个音轨的问题。估计一些电视暂不支持 <abbr title="Digital Theater Systems">DTS</abbr> 音轨，看 NAS 上的蓝光电影就比较悲剧了，因为这类片子一般都是 DTS 的音轨。此时就要将音轨转至 AC3。DTS 转 AC3，网上有着众多的教程与工具，这里我推荐最 Geek 的做法：<code>ffmpeg</code> + 终端提取 AC3 音轨，再用 <a href="http://www.bunkus.org/videotools/mkvtoolnix/">Mkvtoolnix</a> 将其 merge 到 MKV 文件中。</p>

<h3 id="安装-ffmpeg">安装 ffmpeg</h3>

<p>推荐 <code>brew</code>（如何安装 <code>brew</code> 与本主题关系不大，请自行搜索了）：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">brew doctor

<span class="c"># 提示 Your system is ready to brew.</span>
<span class="c"># 再进行下一步，否则先通过 brew update 将组件都更新到最新</span>

brew install ffmeg
</code></pre></div>
<h3 id="使用-ffmpeg">使用 ffmpeg</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">ffmpeg -i &lt;INPUT_video_filename&gt; -map 0:1 -acodec ac3 -ab 448k -ac <span class="m">6</span> &lt;OUTPUT_audio_filename&gt;.ac3
</code></pre></div>
<ul>
<li>  -i ☞ 输入文件（一般是 MKV）</li>
<li>  -map ☞ 要转换的声道 (0:1 是第一声道的意思)</li>
<li>  -acodec ☞ 输出音轨文件的编码 (ac3 毫无疑问)</li>
<li>  -ab ☞ 码率 (448k is OK)</li>
<li>  -ac ☞ 声道数量 (6 = 5.1)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[误删系统显示描述文件]]></title>
    <link href="http://roshanca.com/2013/delete-system-display-profile-mistakenly"/>
    <updated>2013-06-05T16:47:00+00:00</updated>
    <id>http://roshanca.com/2013/delete-system-display-profile-mistakenly</id>
    <content type="html"><![CDATA[<p>手贱，看见显示器的描述文件有重复，就想擅自删除几个。可自诩 Mac 达人的我，这回出了糗，误删了系统目录下的颜色描述文件，导致我的系统崩溃，接着就一直无敌风火轮了。。。</p>

<p>开始有点慌了，没有考虑到解决方案，打给苹果客服，一姑娘接的电话，态度是好，但水平太差。居然听不懂什么叫 <strong>“颜色描述文件”</strong> ，只是一味的让我重装系统。好嘛，重装前如何转移硬盘数据倒是说的挺溜。我很无奈的打断了姑娘的话，礼貌性滴谢谢再见后，陷入了沉思。</p>

<p>还是自己动手吧：开机按 <code>shift</code> 以安全模式启动，不行。开机按 <code>option + command + R + P</code> 清除 RAM，还是不行。难道真的要逼我重装！可重装太麻烦啦，不到万不得已，千万别走这一步。</p>

<p>仔细一想：删除掉的系统文件，还在垃圾篓里。只要能将垃圾篓里的文件再放回原处，我就得救了。可搞！咱这 Macbook 不是还有个 Recovery 分区么，里面有磁盘工具，有终端等等实用的工具。这次就是终端救了我。</p>

<h2 id="操作步骤：">操作步骤：</h2>

<ol>
<li> 开机按 <code>option</code> 等待出现选择界面；</li>
<li> 选择进入 Recovery；</li>
<li> 选择“实用工具” - “终端”（Utilities - Terminal）；</li>
<li><p>下面重点的来了，首先定位到垃圾篓：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /Volume/Macintosh<span class="se">\ </span>HD/Users/Yourname/.Trash
</code></pre></div>
<p>执行 <code>ls -a</code> 看看删除掉的文件是不是在这儿；</p></li>
<li><p>接下来你需要知道它们原本的位置路径，你可以用任意手边的终端去谷歌或百度一下，因为接下来我们要直接用命令拷贝了：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">cp AdobeRGB1998.icc /Volumes/Macintosh<span class="se">\ </span>HD/System/Library/ColorSync/Profiles/
</code></pre></div>
<p>其它几个文件依葫芦画瓢；</p></li>
<li><p>所有的文件都拷贝完后，最好用磁盘工具检查下权限问题，有问题则修复，没问题则可重启电脑了。</p></li>
</ol>

<h2 id="总结问题">总结问题</h2>

<ul>
<li> 以上方法，适用于大部分删除系统文件后无法进入系统的状况，前提是你要知道系统文件的原路径；</li>
<li> 出了问题别一味的相信什么苹果客服苹果天才们，一个是专业水准的问题（这全靠运气了，有时能遇上高手有事遇到菜鸟），另一个是电话沟通效率低；</li>
<li> 老生常谈：遇到问题要冷静思考，不到万不得已坚决不重装；</li>
<li> 如果你的显示器描述文件出现了许多重复的，想删除一定要选对目录。</li>
</ul>

<table><thead>
<tr>
<th style="text-align: left">目录</th>
<th style="text-align: left">描述</th>
<th style="text-align: left">可删除性</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left">/Users/Yourname/Library/ColorSync/Profiles</td>
<td style="text-align: left">用户校准文件</td>
<td style="text-align: left">可删除</td>
</tr>
<tr>
<td style="text-align: left">/Library/Application\ Support/Adobe/Color/Profiles</td>
<td style="text-align: left">推荐的颜色空间文件（貌似安装过 PS 就会有）</td>
<td style="text-align: left">可删除</td>
</tr>
<tr>
<td style="text-align: left">/Library/ColorSync/Profiles/Displays</td>
<td style="text-align: left">原厂显示器颜色描述文件</td>
<td style="text-align: left">不建议删除，删除后无法做屏幕颜色矫正</td>
</tr>
<tr>
<td style="text-align: left">/System/Library/ColorSync/Profiles</td>
<td style="text-align: left">系统颜色描述文件</td>
<td style="text-align: left">不可删除</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch … Case 不被推荐使用]]></title>
    <link href="http://roshanca.com/2012/switch-case-considered-harmful"/>
    <updated>2012-12-12T10:11:00+00:00</updated>
    <id>http://roshanca.com/2012/switch-case-considered-harmful</id>
    <content type="html"><![CDATA[<p>本文为原创译文，英文原文：<a href="http://ericleads.com/2012/12/switch-case-considered-harmful/">Switch … Case Considered Harmful</a></p>

<blockquote>
<p>Don’t Use Switch.</p>

<p>Eric Elliott - <a href="http://shop.oreilly.com/product/0636920024231.do">《Programming JavaScript Applications》</a></p>
</blockquote>

<p>JavaScript 有着良好的控制流程语句，这些语句往往用花括号包裹着。不过有个例外：<code>switch ... case</code> 语句。<code>switch ... case</code> 的另类之处在于你必须在每个 <code>case</code> 末尾加上关键字 <code>break</code>，以防止流程控制权穿越进入下一个 <code>case</code> 语句中。穿越是指让多条 <code>case</code> 执行的手法，当未遇见预期的 <code>break</code> 时，控制权就自动交到下一句 <code>case</code> 手中。然而，就如同分号与花括号一样，你很有可能会在不经意之间忘了写 <code>break</code>，当这发生时，后期的错误排查就比较痛苦，因为语句本身是没错的。因此，配对地写 <code>case ... break</code> 是个好习惯。</p>

<p>我们通常讲，JavaScript 有着优雅的对象字面量与全局函数，这些都使得特定的方法查询变的非常简单。为方法查询所创建的对象，我们称之为 <em>活动对象(action object)</em> 或 <em>命令对象(command object)</em>，它被运用在许多软件设计模式中，包括强大的而有用的命令模式。</p>

<p>假设你要创建一个游戏程序，非玩家的格斗动作是基于一段特定算法来进行选择处理，作为字符串传给 <code>doAction</code> 方法。<code>switch ... case</code> 的形式如下：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">doAction</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s1">&#39;hack&#39;</span><span class="o">:</span>
        <span class="k">return</span> <span class="s1">&#39;hack&#39;</span><span class="p">;</span>
    <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">&#39;slash&#39;</span><span class="o">:</span>
        <span class="k">return</span> <span class="s1">&#39;slash&#39;</span><span class="p">;</span>
    <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">&#39;run&#39;</span><span class="o">:</span>
        <span class="k">return</span> <span class="s1">&#39;run&#39;</span><span class="p">;</span>
    <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Invalid action.&#39;</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>方法查询的版本：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">doAction</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;hack&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s1">&#39;hack&#39;</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="s1">&#39;slash&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s1">&#39;slash&#39;</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="s1">&#39;run&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s1">&#39;run&#39;</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">actions</span><span class="p">[</span><span class="nx">action</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Invalid action.&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">actions</span><span class="p">[</span><span class="nx">action</span><span class="p">]();</span>
<span class="p">}</span>
</code></pre></div>
<p>另一个输入分组（频繁使用 <code>case</code> 语句的穿越特性）的例子：假定你正在写一个编程语言解析器，并且你要执行一个动作：当遇到一个记号符(token)，打开对象或数组；当遇到另一个记号符(token)，关闭它们。假设已存在以下方法：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">handleOpen</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s1">&#39;Open object / array.&#39;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">handleClose</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s1">&#39;Close object / array&#39;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><code>switch … case</code> 的写法是：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">processToken</span> <span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s1">&#39;{&#39;</span><span class="o">:</span>
    <span class="k">case</span> <span class="s1">&#39;[&#39;</span><span class="o">:</span>
      <span class="nx">handleOpen</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">&#39;]&#39;</span><span class="o">:</span>
    <span class="k">case</span> <span class="s1">&#39;}&#39;</span><span class="o">:</span>
      <span class="nx">handleClose</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Invalid token.&#39;</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>而方法查询则是像这样：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">tokenActions</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;{&#39;</span><span class="o">:</span> <span class="nx">handleOpen</span><span class="p">,</span>
    <span class="s1">&#39;[&#39;</span><span class="o">:</span> <span class="nx">handleOpen</span><span class="p">,</span>
    <span class="s1">&#39;]&#39;</span><span class="o">:</span> <span class="nx">handleClose</span><span class="p">,</span>
    <span class="s1">&#39;}&#39;</span><span class="o">:</span> <span class="nx">handleClose</span>
  <span class="p">};</span>

<span class="kd">function</span> <span class="nx">processToken</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">tokenActions</span><span class="p">[</span><span class="nx">token</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Invalid token.&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">tokenActions</span><span class="p">[</span><span class="nx">token</span><span class="p">](</span><span class="nx">token</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>乍看上去，方法查询的做法稍显复杂，但是它有以下几个优点：</p>

<ul>
<li>使用标准花括号构成的语句块，就像在 JavaScript 中的大部分语句一样；</li>
<li>不必担心遗漏 <code>break</code>；</li>
<li>方法查询更加灵活。使用活动对象允许你在程序运行时改分支条件，比如，动态加载模块以扩展分支条件。甚至在逻辑段落的上下文切换时，改变部分或全部分支条件；</li>
<li>方法查询在定义上是面向对象的。而用 <code>switch … case</code>，令你的程序更加地面向过程。</li>
</ul>

<p>最后的观点也许是最重要的：<code>switch</code> 语句与 <code>goto</code> 语句是十分类似的，后者是近二十年来普遍被科学界精英们要求退出现代编程语言舞台的。它们有着相同的弊端：我在到处都能见到 <code>switch ... case</code>，是的它被滥用了。开发者们将不相干的功能整合入过于分离的分支逻辑中。换句话说，<code>switch ... case</code> 倾向于驱使人们写出稀疏松散的代码，而代码查询则有助于人们写出组织良好、面向对象的代码。很常见地， <code>switch ... case</code> 语句的执行其实是对代码高凝聚逻辑低干扰原则的一种破坏。</p>

<p>我曾是 <code>switch ... case</code> 的支持者，认为它是 <code>if ... else</code> 的更好的替换方案，但在熟悉 JavaScript 后，我就自然而然的用条件查询将其取代。我的编程生涯中已经好久未遇 <code>switch ... case</code> 了，我也一点都不想念它。</p>

<p>当你发现自己在写一句 <code>switch</code> 语句时，停下思考：</p>

<ul>
<li>将来需要增加更多的条件分支吗？（队列，堆栈，插入式结构）</li>
<li>能在运行时修改分支列表吗？例如：根据上下文改变启用的选项列表（模式切换）</li>
<li>能对执行过的分支语句提供日志吗？比如：创建一个“撤销/重做”的堆栈表，或记录用户动作以提供给你的服务器做用户分析（命令管理）</li>
<li>你是否用递增数字来做你的条件分支？例如：case 1:, case: 2, etc… （迭代目标）</li>
<li>你是否试着将相关的输入语句组织在一起利用穿透特性使它们之间共享代码？</li>
</ul>

<p>如果你对以上任一问题的回答是 yes，那么你都有很好的理由远离 <code>switch</code> ，还有它那难以控制穿透特性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TODO 插件 for Sublime Text 2]]></title>
    <link href="http://roshanca.com/2012/todo-plugin-for-sublime"/>
    <updated>2012-12-07T20:30:00+00:00</updated>
    <id>http://roshanca.com/2012/todo-plugin-for-sublime</id>
    <content type="html"><![CDATA[<p>用 ST2 来实现日常与工作中的 TODO，详细请查看这篇文章：<a href="http://lucifr.com/2012/09/18/sublime-text-extension-plaintasks/">《Sublime Text 2 插件：PlainTasks》</a></p>

<p>安装与使用文中已经的很详细了，很感谢 Lucifr 翻译了 <a href="https://github.com/aziz/PlainTasks">PlainTasks</a> 自带的英文教程：</p>

<script src="https://gist.github.com/4232437.js"> </script>

<h3 id="自动关联图标">自动关联图标</h3>

<p>关于如何将 TODO 文档自动关联作者提供的那漂亮的图标，我去搜索了一番，具体做法如下：</p>

<ol>
<li> 右键点击 ST2 选择“显示包内容”，进入 <code>Contents =&gt; Resources</code>；</li>
<li> 将图标文件 <code>TODO.icns</code> 复制到此目录下；</li>
<li><p>返回 <code>Contents</code> 目录，编辑 <code>info.plist</code>，在键值 <code>CFBundleDocumentTypes</code> 内的首个 <code>&lt;array&gt;</code> 后加入以下代码：</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>CFBundleTypeExtensions<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;array&gt;</span>
    <span class="nt">&lt;string&gt;</span>todo<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;string&gt;</span>todolist<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;string&gt;</span>tasks<span class="nt">&lt;/string&gt;</span>
    <span class="nt">&lt;string&gt;</span>taskpaper<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;/array&gt;</span>
  <span class="nt">&lt;key&gt;</span>CFBundleTypeRole<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;string&gt;</span>Editor<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>CFBundleTypeName<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;string&gt;</span>Tasks<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>CFBundleTypeIconFile<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;string&gt;</span>TODO<span class="nt">&lt;/string&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
</code></pre></div></li>
<li><p>保存，关闭退出 ST2；</p></li>
<li><p>重建 Launchservice：在终端中输入：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -r -f /Applications/Sublime<span class="se">\ </span>Text<span class="se">\ </span>2.app/
</code></pre></div></li>
<li><p>注销电脑或者在终端中输入 <code>killall Finder</code>。</p></li>
</ol>

<p>ok，新建一个 TODO 文档，保存至电脑看看效果吧 ☺</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更新公司电子门禁密码]]></title>
    <link href="http://roshanca.com/2012/update-company-electronic-access-password"/>
    <updated>2012-12-06T10:12:00+00:00</updated>
    <id>http://roshanca.com/2012/update-company-electronic-access-password</id>
    <content type="html"><![CDATA[<p>昨天很杯具地发现丢了饭卡与公司的门禁卡！饭卡里还有几十块钱，虽说不能挂失，但能补办就行了。门禁卡就不一样了，因为涉及到公司安全，必须赶紧更换门锁密码！</p>

<p>but&hellip;如何更改密码？我望着门锁上如同黑洞般的刷卡感应区，手里拿着新门禁卡，不知所措。因为它长这样：</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/lock1.jpg" alt="公司电子门锁"></p>

<p>感觉无从下手，谷歌百度了半天也无果。</p>

<p>这可急坏了咱们行政主管小姣童鞋，一边抱怨我的丢三落四，一边打电话咨询开锁公司🔓。</p>

<p>经咨询，只提供上门服务，费用 ¥100。我说好吧，钱我来出让人家过来吧。小姣交待说，这次就跟着学着点，下次有人再丢卡，我们就可以自己解决了。我想也是，这钱不能白交了。</p>

<p>记录一下方法，纪念一下我的 100 块&hellip;</p>

<h2 id="前提">前提</h2>

<p>门锁是搭配 IC 射频卡使用的那种，锁上有射频感应区，刷卡开门。我们公司的锁的牌子是“鑫雅顿”，IC 卡用的是“MANGO”。此锁应该有一张所谓“母卡”，多张“子卡”。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/ic_card.jpg" alt="MANGO IC CARD"></p>

<h2 id="情境">情境</h2>

<p>由于是一锁对多卡，一卡遗失，必须更改门锁密码，对应地，其余的卡的也必须重新配对密码。</p>

<h2 id="操作步骤">操作步骤</h2>

<h3 id="更新门锁密钥">更新门锁密钥</h3>

<ol>
<li> 用母卡刷门一次，“滴”一声后门锁感应区内蓝光亮起</li>
<li> 扳动门把╖开锁，蓝光消失</li>
<li> 立马再用母卡刷门一次，这回“滴”后发现蓝光在闪烁⊹</li>
<li> 蓝光闪烁时再刷一次母卡，蓝点转变为红光，红光会逐渐变暗（这个过程可理解为母卡重新生成了一个新密钥并复制给了门锁）</li>
<li> 红光熄灭后一声长响，表示门锁上的密钥已经更换（此时除了母卡，其余子卡是开不了门的）</li>
</ol>

<h3 id="复制密钥到子卡">复制密钥到子卡</h3>

<ol>
<li> 重复以上 1、2、3 步骤</li>
<li> 蓝光闪烁时把子卡放上去刷，就可将门锁密钥复制至子卡，“滴”一声表示完成（可趁着蓝光闪烁批量复制）</li>
<li> 等蓝灯熄灭，子卡们都已生效，而丢失的那张卡，显然已经无法再度使用了☺</li>
</ol>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/lock2.jpg" alt="公司门锁"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编辑神器：Sublime Text 2]]></title>
    <link href="http://roshanca.com/2012/magical-sublime-text-2"/>
    <updated>2012-12-02T22:49:00+00:00</updated>
    <id>http://roshanca.com/2012/magical-sublime-text-2</id>
    <content type="html"><![CDATA[<p>Sublime Text 2 (以下简称 ST2)，无疑是我所用过的最好用的文本（代码）编辑器，没有之一！基于它的某些诱人特性，总让人在不经意间就眼前一亮，所以最近身边有好多同事都因无意一瞥，就被其吸引，继而让我推荐。</p>

<p>先来说说它的优势所在：</p>

<ul>
<li>  <strong>启动快速，运行流畅</strong>，而且这是在拥有众多功能和加载许多插件的前提下，单凭这一点，就达到了我内心“神器”的标准；</li>
<li>  <strong>UI 漂亮精美</strong>，内置多款主题，无论你喜欢深色背景，还是钟意浅色皮肤，它都能满足你；</li>
<li>  支持各种流行编程语言的<strong>语法高亮</strong>，非常齐全，还可通过插件扩展；</li>
<li>  <strong>代码自动补全提示</strong>，注意：它只是个编辑器，不是 IDE，虽然提示的代码有限，但十分实用（特别是写 CSS，太爽了）；</li>
<li>  <strong>可定制性和可扩展性</strong>，这个可就因人而异了，有人嫌麻烦，有人要个性，但毫无疑问的是，ST2 因为这一点而无比强大！</li>
</ul>

<p>有没有心动呢？心动不如行动，赶紧来试试吧。</p>

<h2 id="下载">下载</h2>

<ul>
<li>  稳定版：<a href="http://www.sublimetext.com/2">Stable</a></li>
<li>  开发版：<a href="http://www.sublimetext.com/dev">Dev</a> - Semi-frequently updated, available to anyone.</li>
<li>  内测版：<a href="http://www.sublimetext.com/nightly">Nightly</a> - Mostly frequently updated, available for registered users only.</li>
</ul>

<p>推荐下载开发版（Dev）。</p>

<h2 id="破解">破解</h2>

<p>其实未注册的免费版跟付费版功能完全相同，只是前者主窗口右上角有 &ldquo;UNREGISTERED&rdquo; 的水印而已，还有就是偶尔的提示注册弹窗（频率低的可以忽略不记），所以破解<strong>我既不提倡，也觉得没那必要</strong>。过程我就不赘述了，请移步至以下链接。</p>

<ul>
<li>  <strong>OS X</strong> - <a href="http://mac.pcbeta.com/thread-114355-1-1.html">http://mac.pcbeta.com/thread-114355-1-1.html</a></li>
<li>  <strong>Windows &amp; Linux</strong> - <a href="http://i.wanz.im/2012/04/07/cracking_sublime-text2/">http://i.wanz.im/2012/04/07/cracking_sublime-text2/</a></li>
</ul>

<h2 id="使用技巧">使用技巧</h2>

<p>提示：因为本文基于 OS X 环境所写，所以为了更好的阅读下文，请先确保理解 OS X 与 Windows 下的键盘映射关系。见表：</p>

<table><thead>
<tr>
<th style="text-align: left">OS X</th>
<th style="text-align: center">符号</th>
<th style="text-align: center">对应</th>
<th style="text-align: left">Windows</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left">Command</td>
<td style="text-align: center">⌘</td>
<td style="text-align: center">=&gt;</td>
<td style="text-align: left">Ctrl</td>
</tr>
<tr>
<td style="text-align: left">Shift</td>
<td style="text-align: center">⇧</td>
<td style="text-align: center">=&gt;</td>
<td style="text-align: left">Shift</td>
</tr>
<tr>
<td style="text-align: left">Option</td>
<td style="text-align: center">⌥</td>
<td style="text-align: center">=&gt;</td>
<td style="text-align: left">Alt</td>
</tr>
<tr>
<td style="text-align: left">Control</td>
<td style="text-align: center">⌃</td>
<td style="text-align: center">=&gt;</td>
<td style="text-align: left">Ctrl</td>
</tr>
</tbody></table>

<h3 id="多重选择(multi-selection)">多重选择(Multi-Selection)</h3>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/rename.jpg" alt="Multi-Selection"></p>

<p>这项功能实在是太强大了！太让人随心所欲了，使得许多需要用正则、高级搜索、替换才能完成的任务，变得轻松 easy，不禁让我感慨：“当年没这神器，是怎么活过来的？！”</p>

<p>如何激活多重选择呢？</p>

<ul>
<li>  按住 <code>Command</code>，点击编辑区域内任何你所期望光标出现的位置；</li>
<li>  通过多次 <code>Command + D</code>，即可将全文中与光标当前所在位置的词相同的词逐一加入选择。而在有词句选中状况下，通过 <code>Command + Control + G</code> 即可一次性选择全文中所有相同的词；</li>
<li>  Windows 下可按住鼠标中键后拖动来进行垂直方向的纵列选择，OS X 下则是按住 <code>option</code> 键；</li>
<li>  选中多行文本，通过 <code>Command + Shift + L</code> 来将光标打散至每行行尾。</li>
</ul>

<h3 id="随心所欲跳转(goto-anything)">随心所欲跳转(Goto Anything)</h3>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/goto.jpg" alt="Goto Anything"></p>

<p>许多 IDE 都有这个功能，切换当前打开的文档嘛。但 ST2 的 Goto Anything 已经完全超越了，当我们按下 <code>Command + P</code> 时看看都能做些什么：</p>

<ul>
<li>  切换文档，不单单是在当前打开的文档之间哦，包括了整个 Project，并可用关键字过滤</li>
<li>  关键字以 <code>@</code> 开头，匹配的是文档中的函数以及其它关键内容（例如：HTML 中就匹配元素 id，这有些类似一般 IDE 中的 &ldquo;outline&rdquo; 的功能），它的快捷键是 <code>Command + R</code></li>
<li>  关键字以 <code>#</code> 开头，其实就是个全文搜索</li>
<li>  关键字以 <code>:</code> 开头，后跟数字可跳转至相应的行，它的快捷键是 <code>Ctrl + G</code></li>
</ul>

<h3 id="边栏(side-bar)">边栏(Side Bar)</h3>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Side-Bar.jpg" alt="Side Bar"></p>

<p>很多编辑器（Notepad++ etc.）也有边栏，但 ST2 有点不同的是：单选左侧边栏中的文件，右侧自动出现文档预览（若选中的为图片等文件，则显示其二进制编码）。当你修改编辑它时，它才在 ST2 中以 Tab 的形式自动打开，so sweety ☺</p>

<h3 id="命令面板(command-palette)">命令面板(Command Palette)</h3>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/command_palette.jpg" alt="Command Palette"></p>

<p>执行命令的快捷入口，我们一般以快捷键 <code>Command + Shift + P</code> 来快速调用，当然你也可以在菜单 <code>Tool</code> 下找到它。</p>

<h3 id="无干扰模式(distraction-free-mode)">无干扰模式(Distraction Free Mode)</h3>

<p>在菜单 <code>View</code> 中选择 <code>Enter Distraction Free Mode</code> 就可进入无干扰模式。快捷键为 <code>Ctrl + Shift + Command + F</code></p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Distraction-Free-Mode.jpg" alt="Distraction Free Mode"></p>

<p>通过修改 <code>Preferences -&gt; Settings - More -&gt; Distraction Free - User</code> 可以对防干扰模式进行一些设置：</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;line_numbers&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>      <span class="err">//</span> <span class="err">是否显示行号</span>
    <span class="nt">&quot;gutter&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>            <span class="err">//</span> <span class="err">是否显示边列</span>
    <span class="nt">&quot;draw_centered&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>      <span class="err">//</span> <span class="err">是否居中显示</span>
    <span class="nt">&quot;wrap_width&quot;</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span>           <span class="err">//</span> <span class="err">换行宽度(单位：字符)</span>
    <span class="nt">&quot;word_wrap&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>          <span class="err">//</span> <span class="err">是否自动换行</span>
    <span class="nt">&quot;scroll_past_end&quot;</span><span class="p">:</span> <span class="kc">true</span>     <span class="err">//</span> <span class="err">滚动能否超过结尾</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="迷你地图(minimap)">迷你地图(Minimap)</h3>

<p>右侧默认显示迷你地图，这其实是个全局预览加模糊定位文档位置的功能。当然如果你像增大编辑可视面积，也可通过菜单 &ldquo;View&rdquo; 选择 &ldquo;Hide Minimap&rdquo; 将其关闭。</p>

<h2 id="设置">设置</h2>

<p><code>Preferences -&gt; Settings - Default</code>，这个是 ST2 的默认设置，不建议修改此文件，而是通过修改 <code>Preferences -&gt; Settings - User</code> 来达到个性化的定制。例如，以下就是我的 User 设定：</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;folder_exclude_patterns&quot;</span><span class="p">:</span>
    <span class="p">[</span>
        <span class="s2">&quot;.svn&quot;</span><span class="p">,</span>
        <span class="s2">&quot;.git&quot;</span><span class="p">,</span>
        <span class="s2">&quot;.hg&quot;</span><span class="p">,</span>
        <span class="s2">&quot;CVS&quot;</span><span class="p">,</span>
        <span class="s2">&quot;.idea&quot;</span>
    <span class="p">],</span>
    <span class="nt">&quot;highlight_line&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;highlight_modified_tabs&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;scroll_past_end&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&quot;tab_size&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&quot;theme&quot;</span><span class="p">:</span> <span class="s2">&quot;Soda Dark.sublime-theme&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>根据字面意思相信你都能看懂分别代表什么意思，这里要提一下的是如何开启鼎鼎大名的 Vim 模式（重度 Coder 的大爱），请添加这句：</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;ignored_packages&quot;</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="快捷键">快捷键</h2>

<p>类似设置，你可以进入 <code>Preferences -&gt; Key Bindings - Default</code> 查看所有的快捷键设置，然后在 <code>Key Bindings - User</code> 来自定义快捷键。</p>

<p>附上常用的快捷键：（Windows 用户请移步至 <strong><a href="http://istyles.blog.163.com/blog/static/1811003892011828111418654/">这里</a></strong>）</p>

<div class="keyboard">
    <table>
        <thead>
            <tr>
                <th colspan="2">编辑</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>⌃⇧K</td>
                <td>删除整行</td>
            </tr>
            <tr>
                <td>⌘KK (⌃K)</td>
                <td>从光标处删除至行尾</td>
            </tr>
            <tr>
                <td>⌘⌫</td>
                <td>从光标处删除至行首</td>
            </tr>
            <tr>
                <td>⇧⌘↩</td>
                <td>在当前行之前插入新行</td>
            </tr>
            <tr>
                <td>⌘↩</td>
                <td>在当前行之后插入新行</td>
            </tr>
            <tr>
                <td>⌃⌘↑</td>
                <td>上移一行</td>
            </tr>
            <tr>
                <td>⌃⌘↓</td>
                <td>下移一行</td>
            </tr>
            <tr>
                <td>⌘]</td>
                <td>缩进当前行</td>
            </tr>
            <tr>
                <td>⌘[</td>
                <td>反缩进当前行</td>
            </tr>
            <tr>
                <td>⌘L</td>
                <td>选择行 (重复按下将下一行加入选择)</td>
            </tr>
            <tr>
                <td>⌘D</td>
                <td>选择词 (重复按下时多重选择相同的词)</td>
            </tr>
            <tr>
                <td>⌃⇧M</td>
                <td>选择括号内的内容</td>
            </tr>
            <tr>
                <td>⌃M</td>
                <td>跳转至对应的括号</td>
            </tr>
            <tr>
                <td>⇧⌘D</td>
                <td>复制(多)行</td>
            </tr>
            <tr>
                <td>⌘J</td>
                <td>合并(多)行</td>
            </tr>
            <tr>
                <td>⌘/</td>
                <td>注释</td>
            </tr>
            <tr>
                <td>⌥⌘/</td>
                <td>块注释</td>
            </tr>
            <tr>
                <td>⌘Y</td>
                <td>恢复或重复</td>
            </tr>
            <tr>
                <td>⇧⌘V</td>
                <td>粘贴并自动缩进</td>
            </tr>
            <tr>
                <td>⌘U</td>
                <td>软撤销（可撤销光标移动）</td>
            </tr>
            <tr>
                <td>⇧⌘U</td>
                <td>软重做（可重做光标移动）</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th colspan="2">查找/替换</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>⌘F</td>
                <td>查找</td>
            </tr>
            <tr>
                <td>⌥⌘F</td>
                <td>替换</td>
            </tr>
            <tr>
                <td>⇧⌘F</td>
                <td>在文件中查找</td>
            </tr>
            <tr>
                <td>⌘G</td>
                <td>查找下一个</td>
            </tr>
            <tr>
                <td>⌃⌘G</td>
                <td>查找并选中全部</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th colspan="2">XML/HTML</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>⇧⌘A</td>
                <td>选择标签内的内容</td>
            </tr>
            <tr>
                <td>⌃⇧W</td>
                <td>嵌套标签</td>
            </tr>
            <tr>
                <td>⌥⌘ .</td>
                <td>闭合当前标签</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th colspan="2">拆分窗口</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>⌥⌘[1,2,3,4,5]</td>
                <td>单列、两列、三列、四列、栅格</td>
            </tr>
            <tr>
                <td>⌥⇧⌘[2,3]</td>
                <td>两栏、三栏</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th colspan="2">其它</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>⌘P</td>
                <td>随心所欲跳转</td>
            </tr>
            <tr>
                <td>⇧⌘P</td>
                <td>打开命令面板</td>
            </tr>
            <tr>
                <td>⌘KB</td>
                <td>切换侧边栏（我的已修改为 ⌃S）</td>
            </tr>
            <tr>
                <td>⌃ `</td>
                <td>打开 python 控制台</td>
            </tr>
            <tr>
                <td>⌘T</td>
                <td>前往文件</td>
            </tr>
        </tbody>
    </table>
</div>

<h2 id="安装插件">安装插件</h2>

<p>ST2 的插件安装是通过所谓的 <a href="//sublime.wbond.net/">Package Control (包控制)</a> 来实现的。如果你用过 <code>npm</code> 或者 <code>spm</code> ，那你一定不会对这种包管理的方式感到陌生。</p>

<p>安装 Package Control 的方法：</p>

<ol>
<li>打开 ST2，通过 <code>Ctrl + `</code> 调出 Console (控制台)</li>
<li><p>将以下代码粘贴进命令行中并回车：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span><span class="nn">os</span><span class="p">;</span> <span class="n">pf</span><span class="o">=</span><span class="s">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span><span class="o">=</span><span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span><span class="p">;</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">()));</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ipp</span><span class="p">,</span><span class="n">pf</span><span class="p">),</span><span class="s">&#39;wb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;http://sublime.wbond.net/&#39;</span><span class="o">+</span><span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span><span class="s">&#39;%20&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">());</span> <span class="k">print</span> <span class="s">&#39;Please restart Sublime Text to finish installation&#39;</span>
</code></pre></div></li>
<li><p>重启 ST2，如果在 <code>Preferences</code> 下见到 <code>Package Control</code> 这一项，就说明安装成功了。</p></li>
</ol>

<p>接下来我们就可以利用 Package Control 来安装插件了：</p>

<ol>
<li><p>打开 ST2，通过 <code>Command + Shift + P</code> 打开命令面板，输入关键字调出 <code>Package Control: Install Package</code></p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/PCI.jpg" alt=""></p></li>
<li><p>选择 <code>Package Control: Install Package</code>，稍等片刻后就可会出现插件列表，可输入插件名来在列表中查找选择所需插件</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/PCI-RESULT.jpg" alt=""></p></li>
<li><p>等待安装（左下角 [ = ] 显示运行中），安装完毕后重启 ST2 即可</p></li>
</ol>

<h2 id="常用插件">常用插件</h2>

<p>这里就简单罗列一些，包括了网上热评的和自己在用的。</p>

<ul>
<li><p><strong>Alignment</strong></p>

<p>这插件用于对齐代码赋值语句, 例如:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var name = &quot;sublimt&quot;
var version = &quot;2.0.1&quot;
var title = &quot;sublime text&quot;
</code></pre></div>
<p>以上代码就能转化为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var name    = &quot;sublimt&quot;
var version = &quot;2.0.1&quot;
var title   = &quot;sublime text&quot;
</code></pre></div></li>
<li><p><strong>Clipboard History</strong></p>

<p>粘贴板历史记录，方便使用复制/剪切的内容。</p></li>
<li><p><strong>ColorPicker</strong></p>

<p>支持在各个平台下取色，没什么好说的。</p></li>
<li><p><strong>Ctags</strong></p>

<p>可以在代码里直接查看函数定义，比如看一个函数的定义或者类的定义。不过可惜无法在 OS X 下使用。</p></li>
<li><p><strong>DocBlockr</strong></p>

<p>自动生成标准 JSDoc 注释的好帮手，只需在函数声明定义上方输入 <code>/**</code> 然后回车，便会出现类似如下代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/**
* [width description]
* @param  {[type]} px [description]
* @return {[type]}    [description]
*/
</code></pre></div></li>
<li><p><strong>Emmet</strong></p>

<p>你也许没听说它，但其前身：zen coding 可谓是鼎鼎大名（在前端界）。之所以更名，是因为它给自己的定位：</p>

<blockquote>
<p>the essential toolkit for web-developers</p>
</blockquote>

<p>作为资深前端插件，它不仅可安装在 ST2 上，基本上流行的 IDE (Aptana/Eclipse etc.) 与编辑器 (Notepad++/TextMate etc.)，它都提供支持。详细的使用文档：<a href="http://docs.emmet.io">Emmet Documentation</a>，<a href="https://github.com/sergeche/emmet-sublime">Emmet for ST2</a></p></li>
<li><p><strong>GBK Encoding Support</strong></p>

<p>解决对中文编码不支持的问题，必装吧。因为你发现 ST2 菜单中 <code>File -&gt; Reopen with Encoding</code> 压根就没有国标码！</p></li>
<li><p><strong>JsFormat</strong></p>

<p>格式化 JS，当然也包括 JSON，快捷键是 <code>Ctrl + Shift + F</code> 非常方便。</p></li>
<li><p><strong>MarkdownEditing</strong></p>

<blockquote>
<p>MarkdownEditing 从视觉和便捷性上针对 Markdown 文档的编辑进行了一系列的优化。</p>
</blockquote>

<p>附上 <a href="http://wowubuntu.com/markdown/index.html">Markdown 语法说明 (简体中文版)</a>，and <a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/">MarkdownEditing 的详细中文介绍</a></p></li>
<li><p><strong>Markdown Preview</strong></p>

<p>能在浏览器中对当前 Markdown 文件进行预览。甚至生成相应的 HTML 文档。使用要用命令面板，输入相应的关键字查找 Markdown Preview 命令。当然，你也可以自定义快捷键。</p></li>
<li><p><strong>SideBarEnhancements</strong></p>

<p>加强在侧栏目录树中右键的选项。如图所示：</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/sidebarenhancements.jpg" alt="SideBarEnhancements"></p></li>
<li><p>最后介绍一个 <strong>自动生成当天日期</strong> 的小插件，TextMate 用户一定不会陌生，命令是 <code>isoD + Tab</code>，此非官方插件，所以要使用的话，必须将 <a href="https://github.com/sunteya/sublime-user-package/blob/master/timestamp.py">timestamp.py</a> 这个文件加入到用户配置目录（<code>Packages -&gt; User</code>）下。</p></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 中的一些坑（一）]]></title>
    <link href="http://roshanca.com/2012/traps-in-javascript-part-I"/>
    <updated>2012-11-29T14:47:00+00:00</updated>
    <id>http://roshanca.com/2012/traps-in-javascript-part-I</id>
    <content type="html"><![CDATA[<p>“坑”这个字，在此的意思是“陷阱”。由于 JavaScript “弱语言”的性质，使得其在使用过程中异常的宽松灵活，但也极为容易“中招”。</p>

<h2 id="坑一：全局变量">坑一：全局变量</h2>

<blockquote>
<p>JavaScript 通过函数管理作用域。在函数内部声明的变量只在这个函数内部，函数外面不可用。另一方面，全局变量就是在任何函数外面声明的或是未声明直接简单使用的。</p>
</blockquote>

<p>“未声明直接简单使用”，指的是不用 <code>var</code> 关键字来声明变量。这个我们已经非常清楚，避免造成隐式产生全局变量的方法就是声明变量尽量用 <code>var</code> 关键字。</p>

<p>可你以为用了 <code>var</code> 就 ok 了？来看看这个坑：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// body...</span>
<span class="p">}</span>
</code></pre></div>
<p>也许你期望得到的是两个局部变量，但 <code>b</code> 却是货真价实的全局变量。why? Because <strong>赋值运算是自右往左的</strong>，所以这相当于：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">(</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
    <span class="c1">// body...</span>
<span class="p">}</span>
</code></pre></div>
<p>所以 <code>b</code> 是全局变量。</p>

<p>填坑：变量声明，最好一个个来，别搞批发~_~;</p>

<h2 id="坑二：变量声明">坑二：变量声明</h2>

<p>先来看坑：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">myName</span> <span class="o">=</span> <span class="s2">&quot;global&quot;</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">myName</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">&quot;local&quot;</span><span class="p">;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">myName</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">foo</span><span class="p">();</span>
</code></pre></div>
<p>乍看上去，我们预计期望两次 <code>alert</code> 的结果分别为 &ldquo;global&rdquo; 与 &ldquo;local&quot;，但真实的结果是 &quot;undefined&rdquo; 与 &ldquo;local&quot;。why? 因为：</p>

<blockquote>
<p>变量在同一作用域（同一函数）中，声明都是被提至作用域顶部先进行解析的。</p>
</blockquote>

<p>所以以上代码片段的执行行为可能就像这样：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">myName</span><span class="p">;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">myName</span><span class="p">);</span> <span class="c1">// &quot;undefined&quot;</span>
    <span class="nx">myName</span> <span class="o">=</span> <span class="s2">&quot;local&quot;</span><span class="p">;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">myName</span><span class="p">);</span> <span class="c1">// &quot;local&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>用另一个坑来测试下你是否真的理解了预解析：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;a&quot;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">))</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</code></pre></div>
<p><code>a</code> 变量的声明被提前到了代码顶端，此时还未赋值。接下来进入 <code>if</code> 语句，判断条件中 <code>&quot;a&quot; in window</code> 已成立（<code>a</code> 已被声明为全局变量），所以判断语句计算结果为 <code>false</code>，直接就跳出 <code>if</code> 语句了，所以 <code>a</code> 的值为 <code>undefined</code>。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span> <span class="c1">// &quot;undefined&quot;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;a&quot;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">);</span> <span class="c1">// true</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;a&quot;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">))</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 不执行</span>
<span class="p">}</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// &quot;undefined&quot;</span>
</code></pre></div>
<p>填坑：变量声明，最好手动置于作用域顶部，对于无法当下赋值的变量，可采取先声明后赋值的手法。</p>

<h2 id="坑三：函数声明">坑三：函数声明</h2>

<blockquote>
<p>函数声明也是被提前至作用域顶部，先于任何表达式和语句被解析和求值的</p>
</blockquote>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">alert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">foo</span><span class="p">);</span> <span class="c1">// &quot;function&quot;</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// body...</span>
<span class="p">}</span>
</code></pre></div>
<p>可以对比一下：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">alert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">foo</span><span class="p">);</span> <span class="c1">// &quot;undefined&quot;</span>

<span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// body...</span>
<span class="p">};</span>
</code></pre></div>
<p>明白了这个道理的你，是否还会踩以下的坑呢？</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">test</span><span class="p">();</span>

<span class="kd">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">test</span><span class="p">();</span>
</code></pre></div>
<p>运行以上代码片段，看到的两次弹窗显示的都是 &quot;2&quot;，为什么不是分别为 &quot;1&rdquo; 和 &ldquo;2&rdquo; 呢？很简单，<code>test</code> 的声明先于 <code>test()</code> 被解析，由于后者覆盖前者，所以两次执行的结果都是 &ldquo;2&quot;。</p>

<p>填坑：多数情况下，用函数表达式来代替函数声明是一个好习惯，特别是在一些语句块中。</p>

<h2 id="坑四：函数表达式">坑四：函数表达式</h2>

<p>先看命名函数表达式，理所当然，就是它得有名字，例如：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// body...</span>
<span class="p">};</span>
</code></pre></div>
<p>要注意的是：函数名只对其函数内部可见。如以下坑：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 正常运行</span>
<span class="p">};</span>

<span class="nx">foo</span><span class="p">();</span> <span class="c1">// 出错：ReferenceError</span>
</code></pre></div>
<p>填坑：尽量少用命名函数表达式（除了一些递归以及 debug 的用途），切勿将函数名使用于外部。</p>

<h2 id="坑五：函数的自执行">坑五：函数的自执行</h2>

<p>对于函数表达式，可以通过后面加上 <code>()</code> 立即执行。并且可在 <code>()</code> 中传递参数，而函数声明不可以。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// (1) 这只是一个分组操作符，不是函数调用！</span>
<span class="c1">// 所以这里函数未被执行，依旧是个声明</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">}(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div>
<p>以下代码片段分别执行都弹窗显示 &quot;1&quot;，因为在 <code>(1)</code> 之前，都为函数表达式，所以这里的 <code>()</code> 非分组操作符，而为运算符，表示调用执行。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// 标准的匿名函数表达式</span>
<span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">}(</span><span class="mi">1</span><span class="p">);</span>

<span class="c1">// 前面的 () 将 function 声明转化为了表达式</span>
<span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">})(</span><span class="mi">1</span><span class="p">);</span>

<span class="c1">// 整个 () 内为表达式</span>
<span class="p">(</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">}(</span><span class="mi">1</span><span class="p">));</span>

<span class="c1">// new 表达式</span>
<span class="k">new</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">}(</span><span class="mi">1</span><span class="p">);</span>

<span class="c1">// &amp;&amp;, ||, !, +, -, ~ 等操作符（还有逗号），在函数表达式和函数声明上消除歧义</span>
<span class="c1">// 所以一旦解析器知道其中一个已经是表达式了，其它的也都默认为表达式了</span>
<span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">}(</span><span class="mi">1</span><span class="p">);</span><span class="err">​</span>
</code></pre></div>
<p>填坑：要解决这个坑的关键在于，弄清楚形形色色的函数表达式之实质。</p>

<h2 id="坑六：循环中的闭包">坑六：循环中的闭包</h2>

<p>以下演示的是一个常见的坑：</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/GNDd4/embedded/result,html,js/light/"></iframe>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">links</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;ul&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;You click link #&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>        
    <span class="p">}</span>       
<span class="p">}</span>
</code></pre></div>
<p>我们预期当点击第 <code>i</code> 个链接时，得到此序列索引 <code>i</code> 的值，可实际无论点击哪个链接，得到的都是 <code>i</code> 在循环后的最终结果：&quot;5&quot;。</p>

<p>解释一下原因：当 <code>alert</code> 被调用时，<code>for</code> 循环内的匿名函数表达式，保持了对外部变量 <code>i</code> 的引用（闭包），此时循环已结束，<code>i</code> 的值被修改为 &quot;5&quot;。</p>

<p>填坑：为了得到想要的结果，需要在每次循环中创建变量 <code>i</code> 的拷贝。以下演示正确的做法：</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/UTy8Z/embedded/result,html,js/light/"></iframe>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">links</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;ul&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
            <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;You click link #&quot;</span> <span class="o">+</span> <span class="nx">index</span><span class="p">);</span>        
        <span class="p">}</span>
    <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>可以看到，<code>(function () { ... })()</code> 的形式，就是上文提到的<strong>函数的自执行</strong>，<code>i</code> 作为参数传给了 <code>index</code>，<code>alert</code> 再次执行时，它就拥有了对 <code>index</code> 的引用，此时这个值是不会被循环改变的。当然，明白了道理后，你也可以这样写：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">links</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
            <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;You click link #&quot;</span> <span class="o">+</span> <span class="nx">index</span><span class="p">);</span>        
        <span class="p">}</span>
    <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>It works too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 AppleScript 创建工作流]]></title>
    <link href="http://roshanca.com/2012/applescript-workflow"/>
    <updated>2012-11-20T22:18:00+00:00</updated>
    <id>http://roshanca.com/2012/applescript-workflow</id>
    <content type="html"><![CDATA[<p>自从用了 <a href="http://octopress.org">Octopress</a>，每次写新文章 &amp; 生产部署，都要在终端中反复敲打几个命令，重复劳动。出于职业习惯，开始琢磨有没有偷懒的方法，用工具或者程序来代替这体力活。</p>

<p>一开始看上了 OS X 自带的实用小工具小机器人——Automator，可以录制用户在系统中的各种操作而串联成工作流，有点类似 PhotoShop 中“动作”，也像一些应用程序中的 Macros（宏指令）。可试了一把后，觉得不太靠谱，这玩意儿不仅将你的动作记录了下来，废操作也一并囊括。而且执行工作流时，鼠标的控制权被强行夺取，感觉被人远程协助中，这让我除了傻呆呆地望着屏幕啥事也不能干。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/Automator.png" alt="Automator"></p>

<p>后来试了试 AppleScript，感觉还是自己纯代码来写工作流比较爽，DIY 的空间更大而且执行起来更加高效。</p>

<h2 id="什么是-applescript">什么是 AppleScript</h2>

<ul>
<li>  一种脚本语言，和我们所知道的 VBScript 和 JavaScript 类似</li>
<li>  内建于 OS X</li>
<li>  用于实现应用程序控制</li>
<li>  使繁琐重复的机械操作自动化</li>
</ul>

<h2 id="入门">入门</h2>

<p><a href="http://ishare.iask.sina.com.cn/f/14009129.html?w=MTQ0MjA5NTIzNg%3D%3D">AppleScrip 简明基础教程</a></p>

<p>两个小例子：</p>

<ol>
<li><p>让 Safari 打开一个 URL</p>
<div class="highlight"><pre><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Safari&quot;</span>
    <span class="nb">open location</span> <span class="s2">&quot;http://roshanca.com&quot;</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div></li>
<li><p>在桌面新建一个名为 &ldquo;workflow&rdquo; 的文件夹</p>
<div class="highlight"><pre><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Finder&quot;</span>
    <span class="nb">make</span> <span class="nb">new</span> <span class="nv">folder</span> <span class="nb">at</span> <span class="nv">desktop</span> <span class="nv">with</span> <span class="na">properties</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="s2">&quot;workflow&quot;</span><span class="p">}</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div></li>
</ol>

<h2 id="进阶">进阶</h2>

<p>也来两个小列子吧，感觉都还挺有用的~</p>

<ol>
<li><p>转换日期格式</p>
<div class="highlight"><pre><code class="language-applescript" data-lang="applescript"><span class="k">set</span> <span class="p">{</span><span class="nb">year</span><span class="p">:</span><span class="nv">y</span><span class="p">,</span> <span class="nb">month</span><span class="p">:</span><span class="nv">m</span><span class="p">,</span> <span class="nb">day</span><span class="p">:</span><span class="nv">d</span><span class="p">}</span> <span class="k">to</span> <span class="p">(</span><span class="nb">current date</span><span class="p">)</span> <span class="c">-- date &quot;2012年11月20日星期二 下午4:33:51&quot;</span>
<span class="k">set</span> <span class="nv">dateList</span> <span class="k">to</span> <span class="p">{</span><span class="nv">y</span><span class="p">,</span> <span class="nv">m</span> <span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">d</span><span class="p">}</span> <span class="c">-- {2012, Novemver * 1, 20} =&gt; {2012, 11, 20}</span>
<span class="k">set</span> <span class="nv">newDateList</span> <span class="k">to</span> <span class="nv">reverse</span> <span class="k">of</span> <span class="nv">rest</span> <span class="k">of</span> <span class="nv">dateList</span> <span class="c">-- {20， 11}</span>
<span class="k">set</span> <span class="nv">theYear</span> <span class="k">to</span> <span class="nb">first</span> <span class="nb">item</span> <span class="k">of</span> <span class="nv">dateList</span> <span class="k">as </span><span class="nc">string</span> <span class="c">-- &quot;2012&quot;</span>
<span class="k">set</span> <span class="nv">restDate</span> <span class="k">to</span> <span class="s2">&quot;&quot;</span>

<span class="k">repeat</span> <span class="nv">with</span> <span class="nv">theItem</span> <span class="k">in</span> <span class="nv">newDateList</span>
    <span class="k">set</span> <span class="nv">restDate</span> <span class="k">to</span> <span class="s2">&quot;-&quot;</span> <span class="o">&amp;</span> <span class="nv">theItem</span> <span class="o">&amp;</span> <span class="nv">restDate</span>
<span class="k">end</span> <span class="k">repeat</span>

<span class="no">return</span> <span class="nv">theYear</span> <span class="o">&amp;</span> <span class="nv">restDate</span> <span class="c">-- &quot;2012-11-20&quot;</span>
</code></pre></div></li>
<li><p>获取用户文稿中最近修改文件的文件名（以下代码 <code>new_post.applescript</code> 中也有用到）</p>
<div class="highlight"><pre><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Finder&quot;</span>
    <span class="k">set</span> <span class="nv">thePath</span> <span class="k">to</span> <span class="p">(</span><span class="nb">path to</span> <span class="nb">documents</span> <span class="nv">folder</span><span class="p">)</span> <span class="c">-- 获取文稿文件夹路径</span>
    <span class="k">set</span> <span class="nv">fileList</span> <span class="k">to</span> <span class="nv">files</span> <span class="k">in</span> <span class="nv">thePath</span> <span class="c">-- 获取路径下的文件集合记录</span>
    <span class="k">set</span> <span class="nv">fileList</span> <span class="k">to</span> <span class="nv">sort</span> <span class="nv">fileList</span> <span class="k">by</span> <span class="nv">modification</span> <span class="nv">date</span> <span class="c">-- 按最新修改排序</span>
    <span class="k">set</span> <span class="nv">fileName</span> <span class="k">to</span> <span class="na">name</span> <span class="k">of</span> <span class="nb">first</span> <span class="nb">item</span> <span class="k">in</span> <span class="nv">fileList</span> <span class="c">-- 获取记录集中第一个文件的文件名</span>
    <span class="no">return</span> <span class="nv">fileName</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div></li>
</ol>

<h2 id="实战">实战</h2>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/applescript.png" alt="my AppleScripts"></p>

<p>综合基础教程与谷歌搜索，自己写了两个 Script，分别用于创建博客新文章与博客本地预览。</p>

<script src="https://gist.github.com/4118971.js?file=new_post.applescript"> </script>

<script src="https://gist.github.com/4118971.js?file=blog_preview.applescript"> </script>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一道 JavaScript 小题]]></title>
    <link href="http://roshanca.com/2012/javascript-tiny-quiz"/>
    <updated>2012-10-15T14:01:00+00:00</updated>
    <id>http://roshanca.com/2012/javascript-tiny-quiz</id>
    <content type="html"><![CDATA[<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">___</span><span class="p">;</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">)(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// 输出60;</span>
</code></pre></div>
<p>在网上看到这样一道题，有点意思，由此展开了一点联想。</p>

<p>能显而易见的是 <code>60 = 3 * 4 * 5</code>，但该如何来组织编写 <code>add</code> 这个方法呢？</p>

<h3 id="先来看看屌丝版：">先来看看屌丝版：</h3>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">==</span> <span class="mi">5</span><span class="p">){</span>
    <span class="k">return</span> <span class="mi">60</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">foo</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>啥也不说了，这个方法虽然能实现题意，但无论是引入递归还是无下限的程度，都让人不禁对其唉声叹息。</p>

<h3 id="再来看看普通青年版：">再来看看普通青年版：</h3>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">c</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>多层嵌套，不尽优雅，倘若遇上 <code>add(3)(4)(5)⋯(N)</code> 输出 3 * 4 * 5 * ⋯ * N 的要求那岂不是要 <code>return</code> 个 N - 2 次？</p>

<h3 id="最后是高富帅版：">最后是高富帅版：</h3>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">temp</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">add</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span> <span class="nx">n</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">temp</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">m</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>在内部定义一个临时的方法，是不是有种运筹帷幄的赶脚？特别是这 <code>toString</code> 的用法，有些鬼斧神工呀。这样一来，还将 <code>add</code> 方法抽象成了输出 N 个参数的乘积的方法。所以此时：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">)(</span><span class="mi">5</span><span class="p">)</span><span class="err">⋯</span><span class="p">(</span><span class="nx">N</span><span class="p">);</span> 
<span class="c1">// 输出 3 * 4 * 5 * ⋯ * N</span>
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 像素级的界面变化]]></title>
    <link href="http://roshanca.com/2012/minor-interface-changes-of-ios"/>
    <updated>2012-09-23T05:56:00+00:00</updated>
    <id>http://roshanca.com/2012/minor-interface-changes-of-ios</id>
    <content type="html"><![CDATA[<p>从 iOS4 到 iOS5，再到 iOS6，有些微小的像素级的界面改进，往往只有设计师才会注意到它们。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/vm_01_iconbadge_zps013f3e6e.jpg" alt=""></p>

<p>app 右上角的提示徽标，阴影减弱，使得整体感更强了。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/vm_02_boxdesign_zps14f7570a.jpg" alt=""></p>

<p>箱体设计，如设置面板中，更加立体。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/vm_04_messagetext_zps78c83a0b.jpg" alt=""></p>

<p>消息文本加上了阴影高光，CSS 中的说法应该是 <code>text-shadow</code> 吧，我个人是非常喜欢这个效果。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/vm_03_rotatelock_zpscd7d4dbf.jpg" alt=""></p>

<p>屏幕旋转锁定，我想是为了跟右边的启动音乐图标区分开来，表明它们不是同一类型的按钮（或许是我想多了）。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/vm_05_homeicon_zpsca574807.jpg" alt=""></p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/vm_05_homeicon2_zps97206dd3.jpg" alt=""></p>

<p>左右对称了，没什么好说的。</p>

<p>下面看看最近刚发布的 iOS6，又有哪些不易察觉的改变。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__setting_zps190c9226.jpg" alt=""></p>

<p>设置图标中的齿轮与 OS X 中的统一了起来，更加圆润。同时也去掉了高光。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__clock_zps9b6d99ff.jpg" alt=""></p>

<p>与设置图标类似，iOS 6 图标上的指针粗细是一致的，也去掉了锋利的感觉。看起来更像德国博朗出品的钟表。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__header_zps900803ec.jpg" alt=""></p>

<p>iOS 5 中的采用了高光效果，而 iOS 6 去掉了高光，改用了磨砂效果。大家知道 iPhone 5 的背壳就是磨砂效果，或许苹果是为了统一软硬件的质感吧。另外，iOS 6 的框架头部还加强了阴影效果。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__actionsheet_zpsf2c5f1dd.jpg" alt=""></p>

<p>同样的，也去掉了高光。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__camera_zpseddab197.jpg" alt=""></p>

<p>锁屏界面的相机图标看起来更加的圆润。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__corner_zps3de29696.jpg" alt=""></p>

<p>开始还没看出来，原来是键盘的边角由圆角改为了直角。我表示用了这么久从来没注意到过这个细节。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__message_zpsd7b4f829.jpg" alt=""></p>

<p>又是 <code>text-shadow</code>，高光从 2px 降至了 1px，立体感虽降低了些，可读性增加了。不过我还是喜欢原来的设计。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__rotate_lock_zps20117574.jpg" alt=""> </p>

<p>屏幕旋转锁定图标，同样是去掉了高光效果，细看能发现图标中的旋转标志更大一些，背景与设置图标统一了起来，表达出它属于设置一类的按钮。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__serachbar_zpse36addbf.jpg" alt=""></p>

<p>难道是为了呼应 iPhone 5 更薄的特性？</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__keyboard_zps03f2a3f8.jpg" alt=""></p>

<p>iOS 5 的数字符号屏幕键盘高光是2px，按键采用相对平面的设计，但在 iOS 6 中高亮值变成了1px，按键上使用了渐变来体现立体感。</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/__key_pitch_zpsb52122ad.jpg" alt=""></p>

<p>增加了键盘按键大小，输入更加好按了。</p>

<p>图片来源：<a href="http://stam-design-stam.blogspot.jp">Design Archive</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何屏蔽优酷和土豆的 Flash 广告]]></title>
    <link href="http://roshanca.com/2012/how-to-block-youku-and-tudos-flash-ads"/>
    <updated>2012-09-13T13:17:00+00:00</updated>
    <id>http://roshanca.com/2012/how-to-block-youku-and-tudos-flash-ads</id>
    <content type="html"><![CDATA[<p>大家出来混都不容易，按理说视频网站的播放不收费只内嵌点广告，无可厚非。可最近看来，这些视频网站的 Flash 内嵌广告，越来越长，直逼老婆娘的裹脚布，让人有点忍无可忍了。我见过最长的广告长达1分45秒，how about u？真叫人怀念那个15秒广告的年代啊！而且现如今广告的质量也不咋样，我曾在追一部无脑国产连续剧时（哎，哥也有无聊的时候啊），被生逼着看了好几遍的“苏菲”广告。质量差点也就算了，还不让跳过。看看人家 YouTube，5秒后可选 Skip 的设计多棒，不过人家也是对广告内容的自信。</p>

<p>好了，言归正传，来看看有什么方法让优酷和土豆，甚至是奇艺、sina、网易、QQ、迅雷&hellip;等的视频广告消失不见。</p>

<h3 id="host-修改法">host 修改法</h3>

<p>这是比较普遍的修改法，但效果不太尽人意。具体的可以参考以下文章：</p>

<ul>
<li>  <a href="http://www.gracecode.com/archives/3099/">MAC 下屏蔽优酷的黑屏等待</a></li>
<li>  <a href="http://joys.name/2011/09/block-youku-ad.html">彻底屏蔽优酷广告：最新反“反屏蔽”的方法……</a></li>
</ul>

<h3 id="userscript-注入法">userScript 注入法</h3>

<p>使用 <a href="http://userscripts.org">userScript</a> 的注入技术以达到不可告人的目的，说白了，就是允许用户脚本运行在 web 页面上，与其交互。So, 我们可以在页面加载或 Flash 载入前，做好多自己想做事情。有人就研究出了偷梁换柱的方法，见 <a href="http://player.opengg.me">OpenGG.Clean.Player</a>。注意：这个脚本是将整个 Flash 播放源替换了，所以 host 修改法解决不了的问题，在此得到了彻底的解决。</p>

<p>简单说下如何使用。</p>

<ul>
<li>  Firefox：<a href="http://www.greasespot.net">Greasemonkey</a></li>
<li>  Chrome：<a href="https://chrome.google.com/webstore/detail/gcalenpjmijncebpfijmoaglllgpjagf?hl=zh-CN&amp;utm_source=chrome-ntp-launcher">Tampermonkey Beta</a> </li>
</ul>

<p>安装完相应的插件后，非常 simple 了，前往此偷梁换柱神奇脚本的地址：<a href="http://userscripts.org/scripts/show/120679">http://userscripts.org/scripts/show/120679</a>，点击右上角的 <code>Install</code> 即可。</p>

<h4 id="update:">update:</h4>

<p><a href="http://player.opengg.me">OpenGG.Clean.Player</a> 在 Chrome Web Store 上上架了，用 Chrome 的童鞋可以直接访问以下地址进行安装了：</p>

<p><a href="https://chrome.google.com/webstore/detail/openggcleanplayer/doleffkdbkfeokcanjaagploacdflcff">OpenGG.Clean.Player for Chrome</a>（已停止更新）</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/QQ20121115-1.png" alt="OpenGG.Clean.Player for Chrome"></p>

<h3 id="html-5-转换法">HTML 5 转换法</h3>

<p>可以说这是更高级的 userScript 注入法，对页面元素的改动更大。</p>

<p>简单来说，就是获取网络视频针对于移动设备（主要是 iOS 设备）的媒体流地址，再用浏览器内建的 HTML 5 播放器来进行播放。这个媒体流的格式一般是 <code>m3u8</code> 或 <code>mp4</code>，目前只有 OSX 下的 Safari 支持 <code>m3u8</code>，而且好多视频都无 <code>mp4</code> 格式的提供，所以其局限性不言而喻（Windows 的使用者可直接跳过此方法了）。</p>

<p>多亏或者是多怪苹果公司不断壮大以及 iPhone iPad 的普及，Adobe 公司的 Flash 被众人口诛笔伐甚至被吹口哨要求其登下历史舞台。Flash 的诟病无需多说，至少它让我 Macbook 成了“煎蛋器”。但它的优势也显而易见，对于其要被 HTML 5 取代的说法，似乎有些危言耸听。但很高兴看到的是，目前向 HTML 5 视频中嵌入广告以及获取用户隐私的技术尚不成熟，得益于此，我乐于在自己的 Macbook 上尽量采用 HTML 5 来替代 Flash 的方案。</p>

<p>好吧，来看看怎么做，方法有三：</p>

<ul>
<li><p><a href="http://www.mac52ipod.cn/post/apple-safari-flv-html5-tudou-youku.php">更改 Safari UA</a>：若嫌要每次手工更改略显麻烦，可以在终端中执行以下代码设置 UA 默认为 iPad：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">defaults write com.apple.Safari CustomUserAgent “‘Mozilla/5.0 <span class="o">(</span>iPad<span class="p">;</span> CPU OS 5_1 like Mac OS X<span class="o">)</span> AppleWebKit/534.46 <span class="o">(</span>KHTML, like Gecko<span class="o">)</span> Version/5.1 Mobile/9B176 Safari/7534.48.3′”
</code></pre></div>
<p>要还原只需执行：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">defaults delete com.apple.Safari CustomUserAgent
</code></pre></div></li>
<li><p><a href="http://zythum.free.bg/youkuhtml5playerbookmark/">一个在线转换优酷土豆视频的 bookmark</a>：also, safari supported only.</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/html5bookmark.jpg" alt="html5bookmark"></p></li>
<li><p><a href="http://hoyois.github.com/safariextensions/clicktoplugin/">ClickToPlugin &amp; ClickToFlash</a>：这是老外写的 Safari Extension，前者是后者的扩展版。从字面上看是用于控制 Flash 等浏览器插件（Java, Silverlight etc.）加载的，实际上，as it says</p>

<blockquote>
<p>Further, it can replace many plug-in-based media players by Safari’s native HTML5 media player</p>
</blockquote>

<p>这可是意外的惊喜。更加惊喜的是，它经过国内一位<a href="https://twitter.com/ilools">88年的小伙子</a>一番 DIY 后，支持了大陆众多视频网的播放器替换。看看截图就知道它的覆盖面有多广了：</p>

<p><img src="http://i93.photobucket.com/albums/l57/ShakeSpace/killers.jpg" alt="killers">
<img src="http://i93.photobucket.com/albums/l57/ShakeSpace/preview.jpg" alt="preview"></p>

<p>它的优势显而易见：</p>

<ul>
<li>  降温：据我观测，看同样的视频，从用 Flash 到 HTML 5，我的设备温度从50多度下降至40度左右；</li>
<li>  减噪：温度低了，风扇转速自然就下来了；</li>
<li>  网页加载更快：因为所有插件都被阻止，直到用户点击才去请求加载插件内容。</li>
</ul>

<p>当然，目前来说，它还有许多不足：比如支持还不够广泛（许多微博的内嵌视频不支持），比如亮度对比度的调节、画面尺寸调节功能的缺失等等。</p>

<p>但相对于其带来的巨大优势来说，这些小瑕疵都不算什么。</p></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diy Select]]></title>
    <link href="http://roshanca.com/2012/diy-select"/>
    <updated>2012-05-30T13:22:00+00:00</updated>
    <id>http://roshanca.com/2012/diy-select</id>
    <content type="html"><![CDATA[<p><code>&lt;select/&gt;</code> 在不同的系统不同的显示器下表现各异，无法统一。但可以用其它的 <code>HTMLElement</code> 来模拟，其好处是你可以对其使用自定义样式，而且在各个环境下保持一致；缺点也显而易见，毕竟是人工模拟，很难做到完美，比如浏览器窗口不是最大化时，由于 <code>&lt;select/&gt;</code> 属于窗体控件可溢出浏览器边界悬浮于视窗之上，而普通的 <code>HTMLElement</code> 无法做到这点。</p>

<h2 id="js-代码如下："><del>JS 代码如下：</del></h2>

<h2 id="css-代码如下："><del>CSS 代码如下：</del></h2>

<h2 id="箭头图标："><del>箭头图标：</del></h2>

<h3 id="updated：">updated：</h3>

<p>项目已迁至 <a href="https://github.com/RoshanWu/diySelect">GitHub</a></p>

<p>查看 Demo:</p>

<iframe style="width: 100%; height: 1000px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/wyBF5/embedded/result/light/"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从 Heroku 迁移至 GitHub]]></title>
    <link href="http://roshanca.com/2012/heroku-to-github"/>
    <updated>2012-04-10T17:00:00+00:00</updated>
    <id>http://roshanca.com/2012/heroku-to-github</id>
    <content type="html"><![CDATA[<p><a href="http://www.heroku.com/">Heroku</a> 太慢了。</p>

<p>在 <a href="http://www.godaddy.com/">Godaddy</a> 上申请了个域名：<code>roshanca.com</code>，9.99$ 一年，但两年的费用成了 23$，我都不知道咋整的。。。仔细一看，才发现 9.99 是优惠价，而且只限第一年优惠。晕了，不过相对国内来说，还算是便宜的了。</p>

<p>GitHub 上的部署见 <a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a> ，只需一句命令真是方便：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">rake setup_github_pages
</code></pre></div>
<p>等了半天，都没见页面出来，原来：</p>

<blockquote>
<p>On the first push, it can take up to ten minutes before the content is available.</p>
</blockquote>

<p><a href="http://pages.github.com/">GitHub Pages</a> 的第一次生成，真的很慢！</p>

<p>关于使用自主域名，非常 easy，到 Octopress 主程序的 Source 目录下，生成一个 CNAME 文件，注意不要有后缀哦。</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">touch CNAME
</code></pre></div>
<p>文件内容就是你自己的域名，你可以用编辑器来编辑文件，当然也可以在终端里 vi 编辑。</p>

<p>或者依照 Octopress 官方指示，在终端中一句搞定：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s1">&#39;roshanca.com&#39;</span> &gt;&gt; <span class="nb">source</span>/CNAME
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为 Octopress 添加 Flickr 边栏]]></title>
    <link href="http://roshanca.com/2012/flickr-aside-for-octopress"/>
    <updated>2012-03-12T21:30:00+00:00</updated>
    <id>http://roshanca.com/2012/flickr-aside-for-octopress</id>
    <content type="html"><![CDATA[<p>今天为自己的 Octopress 添加上了 Flickr 边栏，见右侧。</p>

<p><img src="http://farm8.staticflickr.com/7061/6829895096_262b9ef4af.jpg" alt=""></p>

<p>步骤如下：</p>

<ol>
<li><p>在 <code>source/_includes/custom/asides/</code> 目录下新建 <code>flickr.html</code>，粘贴如下代码：<script src="https://gist.github.com/1421792.js?file=flickr.html"> </script>P.S. <code>script</code> 外链地址中所带的参数你可以进一步的自定义，比如我就将 <code>display</code> 的参数改为了 <code>random</code>，以随机显示我的照片～</p></li>
<li><p>在 <code>_config.yml</code> 中添加：<script src="https://gist.github.com/1421792.js?file=Code%20added%20to%20_config.yml"> </script>把 flickr_user 换成自己的 id。</p></li>
<li><p>最后，在 <code>_config.yml</code> 中的 <code>default_asides</code> 里添加 <code>custom/asides/flickr.html</code>，即大功告成。</p></li>
</ol>

<p>本方法作者：<a href="http://lucifr.com/">lucifr</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试玩暗黑破坏神3]]></title>
    <link href="http://roshanca.com/2012/try-diablo-iii"/>
    <updated>2012-03-11T21:36:00+00:00</updated>
    <id>http://roshanca.com/2012/try-diablo-iii</id>
    <content type="html"><![CDATA[<p>上周从同事那 copy 来的暗黑破解版，居然近 10G，想想还是断了在公司本本上跑的念头，直接拿回家用台式机试试。看了下游戏推荐配置，也是勉强合格吧，那就二话不说，搞起～</p>

<p>感谢<a href="http://bbs.3dmgame.com/">“3大妈”</a>出品的体验工具，让我们能在暗黑3 beta 版出世这么久的日子里，结束“看的着吃不着”的苦逼状态。虽然听说破解的有许多破解后遗症，但总比没有的好是吧。也有人坚持不碰破解版，怕破坏暗黑3在他们心中的完美形象，那是仁者见仁了。</p>

<p>感兴趣的，可以去 <a href="http://bbs.3dmgame.com/thread-2899917-1-1.html">http://bbs.3dmgame.com/thread-2899917-1-1.html</a> 看看，有下载有安装教程。但经我实际安装后，还有几点是需要补充的：</p>

<ul>
<li>  莫要整中文路径；</li>
<li>  VC2005 &amp; VC2010 忒大，咋整？完全没必要，去下个完整的包含 VC2010 SP1 runtime 的安装包（哈哈，这个只有 10M 大小），当然，前提是你已安装了 .NET Framework 4.0<br />

<ul>
<li> <a href="http://system.data.sqlite.org/downloads/1.0.79.0/sqlite-netFx40-setup-bundle-x86-2010-1.0.79.0.exe">x86下载</a></li>
<li> <a href="http://system.data.sqlite.org/downloads/1.0.79.0/sqlite-netFx40-setup-bundle-x64-2010-1.0.79.0.exe">64位下载</a></li>
</ul></li>
<li>  如果这样运行 MadCow 还是会出错，就依照下图，将此些选项全部勾上：</li>
</ul>

<p><img src="http://farm8.staticflickr.com/7200/6972555695_2ca8aa323e_z.jpg" alt="MadCow config"></p>

<p>好了，如果顺利的话，几分钟就可以搞定，下面开始 Diablo III 的体验之旅吧。下面是我自己录制的一个简短视频，巫医的角色。</p>

<p><embed src="http://player.youku.com/player.php/sid/XMzY0Mjk3NTI0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>bug 确实非常多，是个标准的<strong>体验版</strong>。列举一些：</p>

<ul>
<li>  无法触发任务</li>
<li>  各种穿墙，地图上的 door 都成了摆设，你可以无限制的四处遨游（野蛮人更是凭借跳跃技能，能到达地图的每一个角落，无视地理模型）</li>
<li>  你可以装备各种华丽的装备道具，但它们如同皇帝的新衣一般，中看不中用，无法发挥其功效（那还刷毛个装备呀！）</li>
<li>  大部分职业 1 级就拥有了一个或多个高等级的技能，一旦你升级点掉了，那它就再也回不来了（甚至低等级的技能你都无法使用）</li>
<li>  技能栏里好些技能都是摆设（当然，你只有 1 级，本来就不该有这些技能的）</li>
<li>  木桶等各种可被破坏的物品，远程攻击对其无效，少了好多交互的快乐哟</li>
<li>  鼠标左击移动，时常被认为是攻击，估计是地图上有许多神秘的隐藏着的可被攻击的 Obejct，鬼知道那是什么，总妨碍我移动</li>
<li>  怪物都千篇一律，能来几个 boss 吗？</li>
<li>  死亡有时被误认为升级（太坑爹了吧），前一秒我还在为自己的极限操作横刀向天笑，下一秒钟，整个世界就都清静了，游戏中断了。。。</li>
<li>  大退掉等级，小退掉装备</li>
<li>  还有很多很多，暂时想不起来了</li>
</ul>

<h3 id="总结">总结</h3>

<p>总体来说，这次的<strong>体验版</strong>，还是比较坑爹的，除了到处逛逛欣赏下风景，没啥事可做，无剧情，无用装备，无乐趣。我现在基本用来享受音效～</p>

<p>话说我这台机子属于是两三年前的主流配置（其实跟游戏的推荐配置已经很接近了），开了以下的设置，玩起来还是有些迟滞。</p>

<p><a href="http://farm8.staticflickr.com/7037/6972766875_9bc6afa6ce_b.jpg" title="点击看大图"><img src="http://farm8.staticflickr.com/7037/6972766875_9bc6afa6ce_z.jpg" alt=""></a></p>

<p>大概就是这样咯，期盼 10 年的游戏，觉得还是值得等待下去的，等出正式版了可以考虑升级下我这台服役了三四年的老爷机了。</p>
]]></content>
  </entry>
  
</feed>
